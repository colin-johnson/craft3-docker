<?php
/**
 * GuestBookApi
 * PHP version 5
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QSR Automations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QsrAutomations\Api\QsrAutomations.Api;

use \QsrAutomations\Api\ApiClient;
use \QsrAutomations\Api\ApiException;
use \QsrAutomations\Api\Configuration;
use \QsrAutomations\Api\ObjectSerializer;

/**
 * GuestBookApi Class Doc Comment
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GuestBookApi
{
    /**
     * API Client
     *
     * @var \QsrAutomations\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \QsrAutomations\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\QsrAutomations\Api\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \QsrAutomations\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \QsrAutomations\Api\ApiClient $apiClient set the API client
     *
     * @return GuestBookApi
     */
    public function setApiClient(\QsrAutomations\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation guestBookAddGuest
     *
     * @param string $site_uid  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestData $guest  (required)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestInstance
     */
    public function guestBookAddGuest($site_uid, $guest, $sync_source = null)
    {
        list($response) = $this->guestBookAddGuestWithHttpInfo($site_uid, $guest, $sync_source);
        return $response;
    }

    /**
     * Operation guestBookAddGuestWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestData $guest  (required)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestInstance, HTTP status code, HTTP response headers (array of strings)
     */
    public function guestBookAddGuestWithHttpInfo($site_uid, $guest, $sync_source = null)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling guestBookAddGuest');
        }
        // verify the required parameter 'guest' is set
        if ($guest === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guest when calling guestBookAddGuest');
        }
        // parse inputs
        $resourcePath = "/site/{siteUID}/GuestBook";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // query params
        if ($sync_source !== null) {
            $queryParams['SyncSource'] = $this->apiClient->getSerializer()->toQueryValue($sync_source);
        }
        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($guest)) {
            $_tempBody = $guest;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestInstance',
                '/site/{siteUID}/GuestBook'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestInstance', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestInstance', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation guestBookAddGuestToCompanyGuestBook
     *
     * @param string $company_uid  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestData $guest  (required)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestInstance
     */
    public function guestBookAddGuestToCompanyGuestBook($company_uid, $guest, $sync_source = null)
    {
        list($response) = $this->guestBookAddGuestToCompanyGuestBookWithHttpInfo($company_uid, $guest, $sync_source);
        return $response;
    }

    /**
     * Operation guestBookAddGuestToCompanyGuestBookWithHttpInfo
     *
     * @param string $company_uid  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestData $guest  (required)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestInstance, HTTP status code, HTTP response headers (array of strings)
     */
    public function guestBookAddGuestToCompanyGuestBookWithHttpInfo($company_uid, $guest, $sync_source = null)
    {
        // verify the required parameter 'company_uid' is set
        if ($company_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_uid when calling guestBookAddGuestToCompanyGuestBook');
        }
        // verify the required parameter 'guest' is set
        if ($guest === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guest when calling guestBookAddGuestToCompanyGuestBook');
        }
        // parse inputs
        $resourcePath = "/company/{companyUID}/GuestBook";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // query params
        if ($sync_source !== null) {
            $queryParams['SyncSource'] = $this->apiClient->getSerializer()->toQueryValue($sync_source);
        }
        // path params
        if ($company_uid !== null) {
            $resourcePath = str_replace(
                "{" . "companyUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($company_uid),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($guest)) {
            $_tempBody = $guest;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestInstance',
                '/company/{companyUID}/GuestBook'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestInstance', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestInstance', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation guestBookDeleteGuest
     *
     * @param string $site_uid  (required)
     * @param string $guest_id  (required)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return string
     */
    public function guestBookDeleteGuest($site_uid, $guest_id, $sync_source = null)
    {
        list($response) = $this->guestBookDeleteGuestWithHttpInfo($site_uid, $guest_id, $sync_source);
        return $response;
    }

    /**
     * Operation guestBookDeleteGuestWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param string $guest_id  (required)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function guestBookDeleteGuestWithHttpInfo($site_uid, $guest_id, $sync_source = null)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling guestBookDeleteGuest');
        }
        // verify the required parameter 'guest_id' is set
        if ($guest_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guest_id when calling guestBookDeleteGuest');
        }
        // parse inputs
        $resourcePath = "/site/{siteUID}/GuestBook/{guestId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sync_source !== null) {
            $queryParams['SyncSource'] = $this->apiClient->getSerializer()->toQueryValue($sync_source);
        }
        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($guest_id !== null) {
            $resourcePath = str_replace(
                "{" . "guestId" . "}",
                $this->apiClient->getSerializer()->toPathValue($guest_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/site/{siteUID}/GuestBook/{guestId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation guestBookDeleteGuestInCompanyGuestBook
     *
     * @param string $company_uid  (required)
     * @param string $guest_id  (required)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return string
     */
    public function guestBookDeleteGuestInCompanyGuestBook($company_uid, $guest_id, $sync_source = null)
    {
        list($response) = $this->guestBookDeleteGuestInCompanyGuestBookWithHttpInfo($company_uid, $guest_id, $sync_source);
        return $response;
    }

    /**
     * Operation guestBookDeleteGuestInCompanyGuestBookWithHttpInfo
     *
     * @param string $company_uid  (required)
     * @param string $guest_id  (required)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function guestBookDeleteGuestInCompanyGuestBookWithHttpInfo($company_uid, $guest_id, $sync_source = null)
    {
        // verify the required parameter 'company_uid' is set
        if ($company_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_uid when calling guestBookDeleteGuestInCompanyGuestBook');
        }
        // verify the required parameter 'guest_id' is set
        if ($guest_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guest_id when calling guestBookDeleteGuestInCompanyGuestBook');
        }
        // parse inputs
        $resourcePath = "/company/{companyUID}/GuestBook/{guestId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sync_source !== null) {
            $queryParams['SyncSource'] = $this->apiClient->getSerializer()->toQueryValue($sync_source);
        }
        // path params
        if ($company_uid !== null) {
            $resourcePath = str_replace(
                "{" . "companyUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($company_uid),
                $resourcePath
            );
        }
        // path params
        if ($guest_id !== null) {
            $resourcePath = str_replace(
                "{" . "guestId" . "}",
                $this->apiClient->getSerializer()->toPathValue($guest_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/company/{companyUID}/GuestBook/{guestId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation guestBookGetGuestUpdatesForCompany
     *
     * @param string $company_uid  (required)
     * @param \DateTime $start  (required)
     * @param \DateTime $stop  (optional)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestPollResponse
     */
    public function guestBookGetGuestUpdatesForCompany($company_uid, $start, $stop = null, $sync_source = null)
    {
        list($response) = $this->guestBookGetGuestUpdatesForCompanyWithHttpInfo($company_uid, $start, $stop, $sync_source);
        return $response;
    }

    /**
     * Operation guestBookGetGuestUpdatesForCompanyWithHttpInfo
     *
     * @param string $company_uid  (required)
     * @param \DateTime $start  (required)
     * @param \DateTime $stop  (optional)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestPollResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function guestBookGetGuestUpdatesForCompanyWithHttpInfo($company_uid, $start, $stop = null, $sync_source = null)
    {
        // verify the required parameter 'company_uid' is set
        if ($company_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_uid when calling guestBookGetGuestUpdatesForCompany');
        }
        // verify the required parameter 'start' is set
        if ($start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start when calling guestBookGetGuestUpdatesForCompany');
        }
        // parse inputs
        $resourcePath = "/Company/{companyUID}/GuestBook";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($stop !== null) {
            $queryParams['stop'] = $this->apiClient->getSerializer()->toQueryValue($stop);
        }
        // query params
        if ($sync_source !== null) {
            $queryParams['syncSource'] = $this->apiClient->getSerializer()->toQueryValue($sync_source);
        }
        // path params
        if ($company_uid !== null) {
            $resourcePath = str_replace(
                "{" . "companyUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($company_uid),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestPollResponse',
                '/Company/{companyUID}/GuestBook'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestPollResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestPollResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation guestBookGetGuests
     *
     * @param string $site_uid  (required)
     * @param int $startat  (optional)
     * @param int $count  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestBookPage
     */
    public function guestBookGetGuests($site_uid, $startat = null, $count = null)
    {
        list($response) = $this->guestBookGetGuestsWithHttpInfo($site_uid, $startat, $count);
        return $response;
    }

    /**
     * Operation guestBookGetGuestsWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $startat  (optional)
     * @param int $count  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestBookPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function guestBookGetGuestsWithHttpInfo($site_uid, $startat = null, $count = null)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling guestBookGetGuests');
        }
        // parse inputs
        $resourcePath = "/site/{siteUID}/GuestBook";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($startat !== null) {
            $queryParams['startat'] = $this->apiClient->getSerializer()->toQueryValue($startat);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestBookPage',
                '/site/{siteUID}/GuestBook'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestBookPage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesIGuestBookPage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation guestBookPatchGuest
     *
     * @param string $site_uid  (required)
     * @param string $guest_id  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeGuestsCommandsPatchGuestCommand $command  (required)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return string
     */
    public function guestBookPatchGuest($site_uid, $guest_id, $command, $sync_source = null)
    {
        list($response) = $this->guestBookPatchGuestWithHttpInfo($site_uid, $guest_id, $command, $sync_source);
        return $response;
    }

    /**
     * Operation guestBookPatchGuestWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param string $guest_id  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeGuestsCommandsPatchGuestCommand $command  (required)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function guestBookPatchGuestWithHttpInfo($site_uid, $guest_id, $command, $sync_source = null)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling guestBookPatchGuest');
        }
        // verify the required parameter 'guest_id' is set
        if ($guest_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guest_id when calling guestBookPatchGuest');
        }
        // verify the required parameter 'command' is set
        if ($command === null) {
            throw new \InvalidArgumentException('Missing the required parameter $command when calling guestBookPatchGuest');
        }
        // parse inputs
        $resourcePath = "/site/{siteUID}/GuestBook/{guestId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // query params
        if ($sync_source !== null) {
            $queryParams['SyncSource'] = $this->apiClient->getSerializer()->toQueryValue($sync_source);
        }
        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($guest_id !== null) {
            $resourcePath = str_replace(
                "{" . "guestId" . "}",
                $this->apiClient->getSerializer()->toPathValue($guest_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($command)) {
            $_tempBody = $command;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/site/{siteUID}/GuestBook/{guestId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation guestBookPatchGuestInCompanyGuestBook
     *
     * @param string $company_uid  (required)
     * @param string $guest_id  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeGuestsCommandsPatchGuestCommand $command  (required)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return string
     */
    public function guestBookPatchGuestInCompanyGuestBook($company_uid, $guest_id, $command, $sync_source = null)
    {
        list($response) = $this->guestBookPatchGuestInCompanyGuestBookWithHttpInfo($company_uid, $guest_id, $command, $sync_source);
        return $response;
    }

    /**
     * Operation guestBookPatchGuestInCompanyGuestBookWithHttpInfo
     *
     * @param string $company_uid  (required)
     * @param string $guest_id  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeGuestsCommandsPatchGuestCommand $command  (required)
     * @param string $sync_source  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function guestBookPatchGuestInCompanyGuestBookWithHttpInfo($company_uid, $guest_id, $command, $sync_source = null)
    {
        // verify the required parameter 'company_uid' is set
        if ($company_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_uid when calling guestBookPatchGuestInCompanyGuestBook');
        }
        // verify the required parameter 'guest_id' is set
        if ($guest_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guest_id when calling guestBookPatchGuestInCompanyGuestBook');
        }
        // verify the required parameter 'command' is set
        if ($command === null) {
            throw new \InvalidArgumentException('Missing the required parameter $command when calling guestBookPatchGuestInCompanyGuestBook');
        }
        // parse inputs
        $resourcePath = "/company/{companyUID}/GuestBook/{guestId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // query params
        if ($sync_source !== null) {
            $queryParams['SyncSource'] = $this->apiClient->getSerializer()->toQueryValue($sync_source);
        }
        // path params
        if ($company_uid !== null) {
            $resourcePath = str_replace(
                "{" . "companyUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($company_uid),
                $resourcePath
            );
        }
        // path params
        if ($guest_id !== null) {
            $resourcePath = str_replace(
                "{" . "guestId" . "}",
                $this->apiClient->getSerializer()->toPathValue($guest_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($command)) {
            $_tempBody = $command;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/company/{companyUID}/GuestBook/{guestId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation guestBookSearchGuestBook
     *
     * @param string $company_uid  (required)
     * @param string $search_guest_book_query_guest_id  (optional)
     * @param string $search_guest_book_query_first_name  (optional)
     * @param string $search_guest_book_query_last_name  (optional)
     * @param string $search_guest_book_query_email  (optional)
     * @param string $search_guest_book_query_city  (optional)
     * @param string $search_guest_book_query_state  (optional)
     * @param string $search_guest_book_query_postal_code  (optional)
     * @param string $search_guest_book_query_mobile_phone_number  (optional)
     * @param string $search_guest_book_query_e164_country_code  (optional)
     * @param string $search_guest_book_query_loyalty_card_id  (optional)
     * @param int $search_guest_book_query_guests_per_page  (optional)
     * @param int $search_guest_book_query_page_number  (optional)
     * @param \DateTime $search_guest_book_query_request_time  (optional)
     * @param string $search_guest_book_query_site_identifier  (optional)
     * @param string $search_guest_book_query_brand_uid  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesISearchGuestBookPage
     */
    public function guestBookSearchGuestBook($company_uid, $search_guest_book_query_guest_id = null, $search_guest_book_query_first_name = null, $search_guest_book_query_last_name = null, $search_guest_book_query_email = null, $search_guest_book_query_city = null, $search_guest_book_query_state = null, $search_guest_book_query_postal_code = null, $search_guest_book_query_mobile_phone_number = null, $search_guest_book_query_e164_country_code = null, $search_guest_book_query_loyalty_card_id = null, $search_guest_book_query_guests_per_page = null, $search_guest_book_query_page_number = null, $search_guest_book_query_request_time = null, $search_guest_book_query_site_identifier = null, $search_guest_book_query_brand_uid = null)
    {
        list($response) = $this->guestBookSearchGuestBookWithHttpInfo($company_uid, $search_guest_book_query_guest_id, $search_guest_book_query_first_name, $search_guest_book_query_last_name, $search_guest_book_query_email, $search_guest_book_query_city, $search_guest_book_query_state, $search_guest_book_query_postal_code, $search_guest_book_query_mobile_phone_number, $search_guest_book_query_e164_country_code, $search_guest_book_query_loyalty_card_id, $search_guest_book_query_guests_per_page, $search_guest_book_query_page_number, $search_guest_book_query_request_time, $search_guest_book_query_site_identifier, $search_guest_book_query_brand_uid);
        return $response;
    }

    /**
     * Operation guestBookSearchGuestBookWithHttpInfo
     *
     * @param string $company_uid  (required)
     * @param string $search_guest_book_query_guest_id  (optional)
     * @param string $search_guest_book_query_first_name  (optional)
     * @param string $search_guest_book_query_last_name  (optional)
     * @param string $search_guest_book_query_email  (optional)
     * @param string $search_guest_book_query_city  (optional)
     * @param string $search_guest_book_query_state  (optional)
     * @param string $search_guest_book_query_postal_code  (optional)
     * @param string $search_guest_book_query_mobile_phone_number  (optional)
     * @param string $search_guest_book_query_e164_country_code  (optional)
     * @param string $search_guest_book_query_loyalty_card_id  (optional)
     * @param int $search_guest_book_query_guests_per_page  (optional)
     * @param int $search_guest_book_query_page_number  (optional)
     * @param \DateTime $search_guest_book_query_request_time  (optional)
     * @param string $search_guest_book_query_site_identifier  (optional)
     * @param string $search_guest_book_query_brand_uid  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesISearchGuestBookPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function guestBookSearchGuestBookWithHttpInfo($company_uid, $search_guest_book_query_guest_id = null, $search_guest_book_query_first_name = null, $search_guest_book_query_last_name = null, $search_guest_book_query_email = null, $search_guest_book_query_city = null, $search_guest_book_query_state = null, $search_guest_book_query_postal_code = null, $search_guest_book_query_mobile_phone_number = null, $search_guest_book_query_e164_country_code = null, $search_guest_book_query_loyalty_card_id = null, $search_guest_book_query_guests_per_page = null, $search_guest_book_query_page_number = null, $search_guest_book_query_request_time = null, $search_guest_book_query_site_identifier = null, $search_guest_book_query_brand_uid = null)
    {
        // verify the required parameter 'company_uid' is set
        if ($company_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_uid when calling guestBookSearchGuestBook');
        }
        // parse inputs
        $resourcePath = "/company/{companyUID}/GuestBook";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($search_guest_book_query_guest_id !== null) {
            $queryParams['searchGuestBookQuery.guestId'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_guest_id);
        }
        // query params
        if ($search_guest_book_query_first_name !== null) {
            $queryParams['searchGuestBookQuery.firstName'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_first_name);
        }
        // query params
        if ($search_guest_book_query_last_name !== null) {
            $queryParams['searchGuestBookQuery.lastName'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_last_name);
        }
        // query params
        if ($search_guest_book_query_email !== null) {
            $queryParams['searchGuestBookQuery.email'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_email);
        }
        // query params
        if ($search_guest_book_query_city !== null) {
            $queryParams['searchGuestBookQuery.city'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_city);
        }
        // query params
        if ($search_guest_book_query_state !== null) {
            $queryParams['searchGuestBookQuery.state'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_state);
        }
        // query params
        if ($search_guest_book_query_postal_code !== null) {
            $queryParams['searchGuestBookQuery.postalCode'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_postal_code);
        }
        // query params
        if ($search_guest_book_query_mobile_phone_number !== null) {
            $queryParams['searchGuestBookQuery.mobilePhoneNumber'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_mobile_phone_number);
        }
        // query params
        if ($search_guest_book_query_e164_country_code !== null) {
            $queryParams['searchGuestBookQuery.e164CountryCode'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_e164_country_code);
        }
        // query params
        if ($search_guest_book_query_loyalty_card_id !== null) {
            $queryParams['searchGuestBookQuery.loyaltyCardID'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_loyalty_card_id);
        }
        // query params
        if ($search_guest_book_query_guests_per_page !== null) {
            $queryParams['searchGuestBookQuery.guestsPerPage'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_guests_per_page);
        }
        // query params
        if ($search_guest_book_query_page_number !== null) {
            $queryParams['searchGuestBookQuery.pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_page_number);
        }
        // query params
        if ($search_guest_book_query_request_time !== null) {
            $queryParams['searchGuestBookQuery.requestTime'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_request_time);
        }
        // query params
        if ($search_guest_book_query_site_identifier !== null) {
            $queryParams['searchGuestBookQuery.siteIdentifier'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_site_identifier);
        }
        // query params
        if ($search_guest_book_query_brand_uid !== null) {
            $queryParams['searchGuestBookQuery.brandUID'] = $this->apiClient->getSerializer()->toQueryValue($search_guest_book_query_brand_uid);
        }
        // path params
        if ($company_uid !== null) {
            $resourcePath = str_replace(
                "{" . "companyUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($company_uid),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesISearchGuestBookPage',
                '/company/{companyUID}/GuestBook'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesISearchGuestBookPage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsGuestsTypesISearchGuestBookPage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
