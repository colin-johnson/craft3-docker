<?php
/**
 * ReservationApi
 * PHP version 5
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QSR Automations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QsrAutomations\Api\QsrAutomations.Api;

use \QsrAutomations\Api\ApiClient;
use \QsrAutomations\Api\ApiException;
use \QsrAutomations\Api\Configuration;
use \QsrAutomations\Api\ObjectSerializer;

/**
 * ReservationApi Class Doc Comment
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReservationApi
{
    /**
     * API Client
     *
     * @var \QsrAutomations\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \QsrAutomations\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\QsrAutomations\Api\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \QsrAutomations\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \QsrAutomations\Api\ApiClient $apiClient set the API client
     *
     * @return ReservationApi
     */
    public function setApiClient(\QsrAutomations\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation reservationAddReservation
     *
     * @param string $site_uid  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsCommandsIAddReservationCommand $command  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationInstance
     */
    public function reservationAddReservation($site_uid, $command)
    {
        list($response) = $this->reservationAddReservationWithHttpInfo($site_uid, $command);
        return $response;
    }

    /**
     * Operation reservationAddReservationWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsCommandsIAddReservationCommand $command  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationInstance, HTTP status code, HTTP response headers (array of strings)
     */
    public function reservationAddReservationWithHttpInfo($site_uid, $command)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling reservationAddReservation');
        }
        // verify the required parameter 'command' is set
        if ($command === null) {
            throw new \InvalidArgumentException('Missing the required parameter $command when calling reservationAddReservation');
        }
        // parse inputs
        $resourcePath = "/site/{siteUID}/reservations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($command)) {
            $_tempBody = $command;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationInstance',
                '/site/{siteUID}/reservations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationInstance', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationInstance', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reservationCancelReservation
     *
     * @param string $site_uid  (required)
     * @param string $visit_id  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return string
     */
    public function reservationCancelReservation($site_uid, $visit_id)
    {
        list($response) = $this->reservationCancelReservationWithHttpInfo($site_uid, $visit_id);
        return $response;
    }

    /**
     * Operation reservationCancelReservationWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param string $visit_id  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function reservationCancelReservationWithHttpInfo($site_uid, $visit_id)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling reservationCancelReservation');
        }
        // verify the required parameter 'visit_id' is set
        if ($visit_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $visit_id when calling reservationCancelReservation');
        }
        // parse inputs
        $resourcePath = "/site/{siteUID}/reservations/{visitID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($visit_id !== null) {
            $resourcePath = str_replace(
                "{" . "visitID" . "}",
                $this->apiClient->getSerializer()->toPathValue($visit_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/site/{siteUID}/reservations/{visitID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reservationGetAvailability
     *
     * @param string $site_uid  (required)
     * @param \DateTime $date  (required)
     * @param int $size  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationAvailability
     */
    public function reservationGetAvailability($site_uid, $date, $size)
    {
        list($response) = $this->reservationGetAvailabilityWithHttpInfo($site_uid, $date, $size);
        return $response;
    }

    /**
     * Operation reservationGetAvailabilityWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param \DateTime $date  (required)
     * @param int $size  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationAvailability, HTTP status code, HTTP response headers (array of strings)
     */
    public function reservationGetAvailabilityWithHttpInfo($site_uid, $date, $size)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling reservationGetAvailability');
        }
        // verify the required parameter 'date' is set
        if ($date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $date when calling reservationGetAvailability');
        }
        // verify the required parameter 'size' is set
        if ($size === null) {
            throw new \InvalidArgumentException('Missing the required parameter $size when calling reservationGetAvailability');
        }
        // parse inputs
        $resourcePath = "/site/{siteUID}/reservations/availability";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($date !== null) {
            $queryParams['date'] = $this->apiClient->getSerializer()->toQueryValue($date);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationAvailability',
                '/site/{siteUID}/reservations/availability'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationAvailability', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationAvailability', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reservationGetReservationByConfirmationNumber
     *
     * @param string $site_uid  (required)
     * @param string $conf  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationInstance
     */
    public function reservationGetReservationByConfirmationNumber($site_uid, $conf)
    {
        list($response) = $this->reservationGetReservationByConfirmationNumberWithHttpInfo($site_uid, $conf);
        return $response;
    }

    /**
     * Operation reservationGetReservationByConfirmationNumberWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param string $conf  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationInstance, HTTP status code, HTTP response headers (array of strings)
     */
    public function reservationGetReservationByConfirmationNumberWithHttpInfo($site_uid, $conf)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling reservationGetReservationByConfirmationNumber');
        }
        // verify the required parameter 'conf' is set
        if ($conf === null) {
            throw new \InvalidArgumentException('Missing the required parameter $conf when calling reservationGetReservationByConfirmationNumber');
        }
        // parse inputs
        $resourcePath = "/site/{siteUID}/reservations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($conf !== null) {
            $queryParams['conf'] = $this->apiClient->getSerializer()->toQueryValue($conf);
        }
        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationInstance',
                '/site/{siteUID}/reservations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationInstance', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIReservationInstance', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reservationPatchReservation
     *
     * @param string $site_uid  (required)
     * @param string $visit_id  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeReservationsCommandsPatchReservationCommand $command  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return string
     */
    public function reservationPatchReservation($site_uid, $visit_id, $command)
    {
        list($response) = $this->reservationPatchReservationWithHttpInfo($site_uid, $visit_id, $command);
        return $response;
    }

    /**
     * Operation reservationPatchReservationWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param string $visit_id  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeReservationsCommandsPatchReservationCommand $command  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function reservationPatchReservationWithHttpInfo($site_uid, $visit_id, $command)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling reservationPatchReservation');
        }
        // verify the required parameter 'visit_id' is set
        if ($visit_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $visit_id when calling reservationPatchReservation');
        }
        // verify the required parameter 'command' is set
        if ($command === null) {
            throw new \InvalidArgumentException('Missing the required parameter $command when calling reservationPatchReservation');
        }
        // parse inputs
        $resourcePath = "/site/{siteUID}/reservations/{visitID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($visit_id !== null) {
            $resourcePath = str_replace(
                "{" . "visitID" . "}",
                $this->apiClient->getSerializer()->toPathValue($visit_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($command)) {
            $_tempBody = $command;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/site/{siteUID}/reservations/{visitID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reservationSyncExternalReservation
     *
     * @param string $site_uid  (required)
     * @param string $external_id  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIExternalReservationData $reservation  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return string
     */
    public function reservationSyncExternalReservation($site_uid, $external_id, $reservation)
    {
        list($response) = $this->reservationSyncExternalReservationWithHttpInfo($site_uid, $external_id, $reservation);
        return $response;
    }

    /**
     * Operation reservationSyncExternalReservationWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param string $external_id  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsReservationsTypesIExternalReservationData $reservation  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function reservationSyncExternalReservationWithHttpInfo($site_uid, $external_id, $reservation)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling reservationSyncExternalReservation');
        }
        // verify the required parameter 'external_id' is set
        if ($external_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $external_id when calling reservationSyncExternalReservation');
        }
        // verify the required parameter 'reservation' is set
        if ($reservation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $reservation when calling reservationSyncExternalReservation');
        }
        // parse inputs
        $resourcePath = "/site/{siteUID}/externalreservations/{externalID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                "{" . "externalID" . "}",
                $this->apiClient->getSerializer()->toPathValue($external_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($reservation)) {
            $_tempBody = $reservation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/site/{siteUID}/externalreservations/{externalID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
