<?php
/**
 * WebAheadApi
 * PHP version 5
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QSR Automations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QsrAutomations\Api\QsrAutomations.Api;

use \QsrAutomations\Api\ApiClient;
use \QsrAutomations\Api\ApiException;
use \QsrAutomations\Api\Configuration;
use \QsrAutomations\Api\ObjectSerializer;

/**
 * WebAheadApi Class Doc Comment
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebAheadApi
{
    /**
     * API Client
     *
     * @var \QsrAutomations\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \QsrAutomations\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\QsrAutomations\Api\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \QsrAutomations\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \QsrAutomations\Api\ApiClient $apiClient set the API client
     *
     * @return WebAheadApi
     */
    public function setApiClient(\QsrAutomations\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation webAheadAddWebAhead
     *
     * Add a WebAhead
     *
     * @param string $site_uid  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeWebAheadCommandsAddWebAheadCommand $command  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return void
     */
    public function webAheadAddWebAhead($site_uid, $command)
    {
        list($response) = $this->webAheadAddWebAheadWithHttpInfo($site_uid, $command);
        return $response;
    }

    /**
     * Operation webAheadAddWebAheadWithHttpInfo
     *
     * Add a WebAhead
     *
     * @param string $site_uid  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeWebAheadCommandsAddWebAheadCommand $command  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadAddWebAheadWithHttpInfo($site_uid, $command)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling webAheadAddWebAhead');
        }
        // verify the required parameter 'command' is set
        if ($command === null) {
            throw new \InvalidArgumentException('Missing the required parameter $command when calling webAheadAddWebAhead');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/WebAhead";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($command)) {
            $_tempBody = $command;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Site/{siteUID}/WebAhead'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation webAheadArrive
     *
     * Arrive a WebAhead
     *
     * @param string $site_uid  (required)
     * @param string $visit_id  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return void
     */
    public function webAheadArrive($site_uid, $visit_id)
    {
        list($response) = $this->webAheadArriveWithHttpInfo($site_uid, $visit_id);
        return $response;
    }

    /**
     * Operation webAheadArriveWithHttpInfo
     *
     * Arrive a WebAhead
     *
     * @param string $site_uid  (required)
     * @param string $visit_id  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadArriveWithHttpInfo($site_uid, $visit_id)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling webAheadArrive');
        }
        // verify the required parameter 'visit_id' is set
        if ($visit_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $visit_id when calling webAheadArrive');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/WebAhead/{visitId}/Arrive";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($visit_id !== null) {
            $resourcePath = str_replace(
                "{" . "visitId" . "}",
                $this->apiClient->getSerializer()->toPathValue($visit_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Site/{siteUID}/WebAhead/{visitId}/Arrive'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation webAheadArriveGlobal
     *
     * Arrive a WebAhead
     *
     * @param string $confirmation_number The confirmation number. (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return void
     */
    public function webAheadArriveGlobal($confirmation_number)
    {
        list($response) = $this->webAheadArriveGlobalWithHttpInfo($confirmation_number);
        return $response;
    }

    /**
     * Operation webAheadArriveGlobalWithHttpInfo
     *
     * Arrive a WebAhead
     *
     * @param string $confirmation_number The confirmation number. (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadArriveGlobalWithHttpInfo($confirmation_number)
    {
        // verify the required parameter 'confirmation_number' is set
        if ($confirmation_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $confirmation_number when calling webAheadArriveGlobal');
        }
        // parse inputs
        $resourcePath = "/WebAhead/{confirmationNumber}/Arrive";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($confirmation_number !== null) {
            $resourcePath = str_replace(
                "{" . "confirmationNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($confirmation_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/WebAhead/{confirmationNumber}/Arrive'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation webAheadCancel
     *
     * Cancel a WebAhead
     *
     * @param string $site_uid  (required)
     * @param string $visit_id  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return void
     */
    public function webAheadCancel($site_uid, $visit_id)
    {
        list($response) = $this->webAheadCancelWithHttpInfo($site_uid, $visit_id);
        return $response;
    }

    /**
     * Operation webAheadCancelWithHttpInfo
     *
     * Cancel a WebAhead
     *
     * @param string $site_uid  (required)
     * @param string $visit_id  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadCancelWithHttpInfo($site_uid, $visit_id)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling webAheadCancel');
        }
        // verify the required parameter 'visit_id' is set
        if ($visit_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $visit_id when calling webAheadCancel');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/WebAhead/{visitId}/Cancel";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($visit_id !== null) {
            $resourcePath = str_replace(
                "{" . "visitId" . "}",
                $this->apiClient->getSerializer()->toPathValue($visit_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Site/{siteUID}/WebAhead/{visitId}/Cancel'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation webAheadCancelGlobal
     *
     * Cancels the by confirmation number.
     *
     * @param string $confirmation_number The confirmation number. (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return string
     */
    public function webAheadCancelGlobal($confirmation_number)
    {
        list($response) = $this->webAheadCancelGlobalWithHttpInfo($confirmation_number);
        return $response;
    }

    /**
     * Operation webAheadCancelGlobalWithHttpInfo
     *
     * Cancels the by confirmation number.
     *
     * @param string $confirmation_number The confirmation number. (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadCancelGlobalWithHttpInfo($confirmation_number)
    {
        // verify the required parameter 'confirmation_number' is set
        if ($confirmation_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $confirmation_number when calling webAheadCancelGlobal');
        }
        // parse inputs
        $resourcePath = "/WebAhead/{confirmationNumber}/Cancel";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($confirmation_number !== null) {
            $resourcePath = str_replace(
                "{" . "confirmationNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($confirmation_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/WebAhead/{confirmationNumber}/Cancel'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webAheadDisable
     *
     * @param string $site_uid  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return string
     */
    public function webAheadDisable($site_uid)
    {
        list($response) = $this->webAheadDisableWithHttpInfo($site_uid);
        return $response;
    }

    /**
     * Operation webAheadDisableWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadDisableWithHttpInfo($site_uid)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling webAheadDisable');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/WebAhead/disable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/Site/{siteUID}/WebAhead/disable'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webAheadEnable
     *
     * @param string $site_uid  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return string
     */
    public function webAheadEnable($site_uid)
    {
        list($response) = $this->webAheadEnableWithHttpInfo($site_uid);
        return $response;
    }

    /**
     * Operation webAheadEnableWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadEnableWithHttpInfo($site_uid)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling webAheadEnable');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/WebAhead/enable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/Site/{siteUID}/WebAhead/enable'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webAheadGet
     *
     * Get a WebAhead
     *
     * @param string $site_uid  (required)
     * @param string $visit_id  (required)
     * @param string[] $expand  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return void
     */
    public function webAheadGet($site_uid, $visit_id, $expand = null)
    {
        list($response) = $this->webAheadGetWithHttpInfo($site_uid, $visit_id, $expand);
        return $response;
    }

    /**
     * Operation webAheadGetWithHttpInfo
     *
     * Get a WebAhead
     *
     * @param string $site_uid  (required)
     * @param string $visit_id  (required)
     * @param string[] $expand  (optional)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadGetWithHttpInfo($site_uid, $visit_id, $expand = null)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling webAheadGet');
        }
        // verify the required parameter 'visit_id' is set
        if ($visit_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $visit_id when calling webAheadGet');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/WebAhead/{visitId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($expand)) {
            $expand = $this->apiClient->getSerializer()->serializeCollection($expand, 'multi', true);
        }
        if ($expand !== null) {
            $queryParams['expand'] = $this->apiClient->getSerializer()->toQueryValue($expand);
        }
        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($visit_id !== null) {
            $resourcePath = str_replace(
                "{" . "visitId" . "}",
                $this->apiClient->getSerializer()->toPathValue($visit_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Site/{siteUID}/WebAhead/{visitId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation webAheadGetWaitListStatus
     *
     * Get wait list status and quote for web ahead based on party size.
     *
     * @param string $site_uid  (required)
     * @param int $party_size  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatus
     */
    public function webAheadGetWaitListStatus($site_uid, $party_size)
    {
        list($response) = $this->webAheadGetWaitListStatusWithHttpInfo($site_uid, $party_size);
        return $response;
    }

    /**
     * Operation webAheadGetWaitListStatusWithHttpInfo
     *
     * Get wait list status and quote for web ahead based on party size.
     *
     * @param string $site_uid  (required)
     * @param int $party_size  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadGetWaitListStatusWithHttpInfo($site_uid, $party_size)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling webAheadGetWaitListStatus');
        }
        // verify the required parameter 'party_size' is set
        if ($party_size === null) {
            throw new \InvalidArgumentException('Missing the required parameter $party_size when calling webAheadGetWaitListStatus');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/WebAhead/Status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($party_size !== null) {
            $queryParams['partySize'] = $this->apiClient->getSerializer()->toQueryValue($party_size);
        }
        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatus',
                '/Site/{siteUID}/WebAhead/Status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatus', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatus', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webAheadGetWaitListStatusForPartySizes
     *
     * Get wait list status and quote for web ahead based on party size.
     *
     * @param string $site_uid  (required)
     * @param int[] $party_sizes  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatusForPartySizes
     */
    public function webAheadGetWaitListStatusForPartySizes($site_uid, $party_sizes)
    {
        list($response) = $this->webAheadGetWaitListStatusForPartySizesWithHttpInfo($site_uid, $party_sizes);
        return $response;
    }

    /**
     * Operation webAheadGetWaitListStatusForPartySizesWithHttpInfo
     *
     * Get wait list status and quote for web ahead based on party size.
     *
     * @param string $site_uid  (required)
     * @param int[] $party_sizes  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatusForPartySizes, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadGetWaitListStatusForPartySizesWithHttpInfo($site_uid, $party_sizes)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling webAheadGetWaitListStatusForPartySizes');
        }
        // verify the required parameter 'party_sizes' is set
        if ($party_sizes === null) {
            throw new \InvalidArgumentException('Missing the required parameter $party_sizes when calling webAheadGetWaitListStatusForPartySizes');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/WebAhead/StatusForPartySizes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($party_sizes)) {
            $party_sizes = $this->apiClient->getSerializer()->serializeCollection($party_sizes, 'multi', true);
        }
        if ($party_sizes !== null) {
            $queryParams['partySizes'] = $this->apiClient->getSerializer()->toQueryValue($party_sizes);
        }
        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatusForPartySizes',
                '/Site/{siteUID}/WebAhead/StatusForPartySizes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatusForPartySizes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatusForPartySizes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webAheadGetWaitListStatusForSites
     *
     * Get wait list status and quote for web ahead based on party size, for a list of sites
     *
     * @param string[] $site_ui_ds  (required)
     * @param int[] $party_sizes  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatusForSites
     */
    public function webAheadGetWaitListStatusForSites($site_ui_ds, $party_sizes)
    {
        list($response) = $this->webAheadGetWaitListStatusForSitesWithHttpInfo($site_ui_ds, $party_sizes);
        return $response;
    }

    /**
     * Operation webAheadGetWaitListStatusForSitesWithHttpInfo
     *
     * Get wait list status and quote for web ahead based on party size, for a list of sites
     *
     * @param string[] $site_ui_ds  (required)
     * @param int[] $party_sizes  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatusForSites, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadGetWaitListStatusForSitesWithHttpInfo($site_ui_ds, $party_sizes)
    {
        // verify the required parameter 'site_ui_ds' is set
        if ($site_ui_ds === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_ui_ds when calling webAheadGetWaitListStatusForSites');
        }
        // verify the required parameter 'party_sizes' is set
        if ($party_sizes === null) {
            throw new \InvalidArgumentException('Missing the required parameter $party_sizes when calling webAheadGetWaitListStatusForSites');
        }
        // parse inputs
        $resourcePath = "/Site/WebAhead/Status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($site_ui_ds)) {
            $site_ui_ds = $this->apiClient->getSerializer()->serializeCollection($site_ui_ds, 'multi', true);
        }
        if ($site_ui_ds !== null) {
            $queryParams['siteUIDs'] = $this->apiClient->getSerializer()->toQueryValue($site_ui_ds);
        }
        // query params
        if (is_array($party_sizes)) {
            $party_sizes = $this->apiClient->getSerializer()->serializeCollection($party_sizes, 'multi', true);
        }
        if ($party_sizes !== null) {
            $queryParams['partySizes'] = $this->apiClient->getSerializer()->toQueryValue($party_sizes);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatusForSites',
                '/Site/WebAhead/Status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatusForSites', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\QsrAutomationsDineTimeContractsWebAheadTypesIWaitListStatusForSites', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webAheadGetWebAheadGlobal
     *
     * Gets the web ahead.
     *
     * @param string $confirmation_number The confirmation number. (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesWebAheadsIWebAheadWithSite
     */
    public function webAheadGetWebAheadGlobal($confirmation_number)
    {
        list($response) = $this->webAheadGetWebAheadGlobalWithHttpInfo($confirmation_number);
        return $response;
    }

    /**
     * Operation webAheadGetWebAheadGlobalWithHttpInfo
     *
     * Gets the web ahead.
     *
     * @param string $confirmation_number The confirmation number. (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesWebAheadsIWebAheadWithSite, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadGetWebAheadGlobalWithHttpInfo($confirmation_number)
    {
        // verify the required parameter 'confirmation_number' is set
        if ($confirmation_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $confirmation_number when calling webAheadGetWebAheadGlobal');
        }
        // parse inputs
        $resourcePath = "/WebAhead/{confirmationNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($confirmation_number !== null) {
            $resourcePath = str_replace(
                "{" . "confirmationNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($confirmation_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesWebAheadsIWebAheadWithSite',
                '/WebAhead/{confirmationNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesWebAheadsIWebAheadWithSite', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesWebAheadsIWebAheadWithSite', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webAheadUpdateWebAheadGlobalPartial
     *
     * Updates the web ahead partial by confirmation number.
     *
     * @param string $confirmation_number The confirmation number. (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeWebAheadCommandsPatchWebAheadCommand $command The command. (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesWebAheadsIWebAheadWithSite
     */
    public function webAheadUpdateWebAheadGlobalPartial($confirmation_number, $command)
    {
        list($response) = $this->webAheadUpdateWebAheadGlobalPartialWithHttpInfo($confirmation_number, $command);
        return $response;
    }

    /**
     * Operation webAheadUpdateWebAheadGlobalPartialWithHttpInfo
     *
     * Updates the web ahead partial by confirmation number.
     *
     * @param string $confirmation_number The confirmation number. (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeWebAheadCommandsPatchWebAheadCommand $command The command. (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesWebAheadsIWebAheadWithSite, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadUpdateWebAheadGlobalPartialWithHttpInfo($confirmation_number, $command)
    {
        // verify the required parameter 'confirmation_number' is set
        if ($confirmation_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $confirmation_number when calling webAheadUpdateWebAheadGlobalPartial');
        }
        // verify the required parameter 'command' is set
        if ($command === null) {
            throw new \InvalidArgumentException('Missing the required parameter $command when calling webAheadUpdateWebAheadGlobalPartial');
        }
        // parse inputs
        $resourcePath = "/WebAhead/{confirmationNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($confirmation_number !== null) {
            $resourcePath = str_replace(
                "{" . "confirmationNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($confirmation_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($command)) {
            $_tempBody = $command;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesWebAheadsIWebAheadWithSite',
                '/WebAhead/{confirmationNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesWebAheadsIWebAheadWithSite', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesWebAheadsIWebAheadWithSite', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webAheadUpdateWebAheadPartial
     *
     * Update a WebAhead
     *
     * @param string $site_uid  (required)
     * @param string $visit_id  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeWebAheadCommandsPatchWebAheadCommand $command  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return void
     */
    public function webAheadUpdateWebAheadPartial($site_uid, $visit_id, $command)
    {
        list($response) = $this->webAheadUpdateWebAheadPartialWithHttpInfo($site_uid, $visit_id, $command);
        return $response;
    }

    /**
     * Operation webAheadUpdateWebAheadPartialWithHttpInfo
     *
     * Update a WebAhead
     *
     * @param string $site_uid  (required)
     * @param string $visit_id  (required)
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeWebAheadCommandsPatchWebAheadCommand $command  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webAheadUpdateWebAheadPartialWithHttpInfo($site_uid, $visit_id, $command)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling webAheadUpdateWebAheadPartial');
        }
        // verify the required parameter 'visit_id' is set
        if ($visit_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $visit_id when calling webAheadUpdateWebAheadPartial');
        }
        // verify the required parameter 'command' is set
        if ($command === null) {
            throw new \InvalidArgumentException('Missing the required parameter $command when calling webAheadUpdateWebAheadPartial');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/WebAhead/{visitId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($visit_id !== null) {
            $resourcePath = str_replace(
                "{" . "visitId" . "}",
                $this->apiClient->getSerializer()->toPathValue($visit_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($command)) {
            $_tempBody = $command;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Site/{siteUID}/WebAhead/{visitId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
