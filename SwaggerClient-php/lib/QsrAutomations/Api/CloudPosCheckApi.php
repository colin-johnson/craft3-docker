<?php
/**
 * CloudPosCheckApi
 * PHP version 5
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QSR Automations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QsrAutomations\Api\QsrAutomations.Api;

use \QsrAutomations\Api\ApiClient;
use \QsrAutomations\Api\ApiException;
use \QsrAutomations\Api\Configuration;
use \QsrAutomations\Api\ObjectSerializer;

/**
 * CloudPosCheckApi Class Doc Comment
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CloudPosCheckApi
{
    /**
     * API Client
     *
     * @var \QsrAutomations\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \QsrAutomations\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\QsrAutomations\Api\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \QsrAutomations\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \QsrAutomations\Api\ApiClient $apiClient set the API client
     *
     * @return CloudPosCheckApi
     */
    public function setApiClient(\QsrAutomations\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation cloudPosCheckAddCheck
     *
     * @param string $site_uid  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCheck $check  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckAddCheck($site_uid, $check)
    {
        list($response) = $this->cloudPosCheckAddCheckWithHttpInfo($site_uid, $check);
        return $response;
    }

    /**
     * Operation cloudPosCheckAddCheckWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCheck $check  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckAddCheckWithHttpInfo($site_uid, $check)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckAddCheck');
        }
        // verify the required parameter 'check' is set
        if ($check === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check when calling cloudPosCheckAddCheck');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($check)) {
            $_tempBody = $check;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckAddCourseToCheck
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCourse $course  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckAddCourseToCheck($site_uid, $check_number, $course)
    {
        list($response) = $this->cloudPosCheckAddCourseToCheckWithHttpInfo($site_uid, $check_number, $course);
        return $response;
    }

    /**
     * Operation cloudPosCheckAddCourseToCheckWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCourse $course  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckAddCourseToCheckWithHttpInfo($site_uid, $check_number, $course)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckAddCourseToCheck');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckAddCourseToCheck');
        }
        // verify the required parameter 'course' is set
        if ($course === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course when calling cloudPosCheckAddCourseToCheck');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($course)) {
            $_tempBody = $course;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckAddItemsToCourse
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOItemList $items  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckAddItemsToCourse($site_uid, $check_number, $course_number, $items)
    {
        list($response) = $this->cloudPosCheckAddItemsToCourseWithHttpInfo($site_uid, $check_number, $course_number, $items);
        return $response;
    }

    /**
     * Operation cloudPosCheckAddItemsToCourseWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOItemList $items  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckAddItemsToCourseWithHttpInfo($site_uid, $check_number, $course_number, $items)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckAddItemsToCourse');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckAddItemsToCourse');
        }
        // verify the required parameter 'course_number' is set
        if ($course_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_number when calling cloudPosCheckAddItemsToCourse');
        }
        // verify the required parameter 'items' is set
        if ($items === null) {
            throw new \InvalidArgumentException('Missing the required parameter $items when calling cloudPosCheckAddItemsToCourse');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/Items";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // path params
        if ($course_number !== null) {
            $resourcePath = str_replace(
                "{" . "courseNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($items)) {
            $_tempBody = $items;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/Items'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckAddPaymentStateToCourse
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCoursePaymentState $payment_state  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckAddPaymentStateToCourse($site_uid, $check_number, $course_number, $payment_state)
    {
        list($response) = $this->cloudPosCheckAddPaymentStateToCourseWithHttpInfo($site_uid, $check_number, $course_number, $payment_state);
        return $response;
    }

    /**
     * Operation cloudPosCheckAddPaymentStateToCourseWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCoursePaymentState $payment_state  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckAddPaymentStateToCourseWithHttpInfo($site_uid, $check_number, $course_number, $payment_state)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckAddPaymentStateToCourse');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckAddPaymentStateToCourse');
        }
        // verify the required parameter 'course_number' is set
        if ($course_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_number when calling cloudPosCheckAddPaymentStateToCourse');
        }
        // verify the required parameter 'payment_state' is set
        if ($payment_state === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payment_state when calling cloudPosCheckAddPaymentStateToCourse');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/PaymentStates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // path params
        if ($course_number !== null) {
            $resourcePath = str_replace(
                "{" . "courseNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($payment_state)) {
            $_tempBody = $payment_state;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/PaymentStates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckAddPaymentStatesToCheck
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCoursePaymentState $payment_state  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckAddPaymentStatesToCheck($site_uid, $check_number, $payment_state)
    {
        list($response) = $this->cloudPosCheckAddPaymentStatesToCheckWithHttpInfo($site_uid, $check_number, $payment_state);
        return $response;
    }

    /**
     * Operation cloudPosCheckAddPaymentStatesToCheckWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCoursePaymentState $payment_state  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckAddPaymentStatesToCheckWithHttpInfo($site_uid, $check_number, $payment_state)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckAddPaymentStatesToCheck');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckAddPaymentStatesToCheck');
        }
        // verify the required parameter 'payment_state' is set
        if ($payment_state === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payment_state when calling cloudPosCheckAddPaymentStatesToCheck');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/PaymentStates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($payment_state)) {
            $_tempBody = $payment_state;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/PaymentStates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckBumpCheck
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckBumpCheck($site_uid, $check_number)
    {
        list($response) = $this->cloudPosCheckBumpCheckWithHttpInfo($site_uid, $check_number);
        return $response;
    }

    /**
     * Operation cloudPosCheckBumpCheckWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckBumpCheckWithHttpInfo($site_uid, $check_number)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckBumpCheck');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckBumpCheck');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/Bumps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/Bumps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckBumpCourseOnCheck
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckBumpCourseOnCheck($site_uid, $check_number, $course_number)
    {
        list($response) = $this->cloudPosCheckBumpCourseOnCheckWithHttpInfo($site_uid, $check_number, $course_number);
        return $response;
    }

    /**
     * Operation cloudPosCheckBumpCourseOnCheckWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckBumpCourseOnCheckWithHttpInfo($site_uid, $check_number, $course_number)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckBumpCourseOnCheck');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckBumpCourseOnCheck');
        }
        // verify the required parameter 'course_number' is set
        if ($course_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_number when calling cloudPosCheckBumpCourseOnCheck');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/Bumps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // path params
        if ($course_number !== null) {
            $resourcePath = str_replace(
                "{" . "courseNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/Bumps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckCancelAllCoursesInCheck
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckCancelAllCoursesInCheck($site_uid, $check_number)
    {
        list($response) = $this->cloudPosCheckCancelAllCoursesInCheckWithHttpInfo($site_uid, $check_number);
        return $response;
    }

    /**
     * Operation cloudPosCheckCancelAllCoursesInCheckWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckCancelAllCoursesInCheckWithHttpInfo($site_uid, $check_number)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckCancelAllCoursesInCheck');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckCancelAllCoursesInCheck');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/Cancellations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/Cancellations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckCancelCourseInCheck
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckCancelCourseInCheck($site_uid, $check_number, $course_number)
    {
        list($response) = $this->cloudPosCheckCancelCourseInCheckWithHttpInfo($site_uid, $check_number, $course_number);
        return $response;
    }

    /**
     * Operation cloudPosCheckCancelCourseInCheckWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckCancelCourseInCheckWithHttpInfo($site_uid, $check_number, $course_number)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckCancelCourseInCheck');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckCancelCourseInCheck');
        }
        // verify the required parameter 'course_number' is set
        if ($course_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_number when calling cloudPosCheckCancelCourseInCheck');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/Cancellations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // path params
        if ($course_number !== null) {
            $resourcePath = str_replace(
                "{" . "courseNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/Cancellations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckCancelItemInCourse
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @param int $item_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOItemCancellation $cancellation  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckCancelItemInCourse($site_uid, $check_number, $course_number, $item_number, $cancellation)
    {
        list($response) = $this->cloudPosCheckCancelItemInCourseWithHttpInfo($site_uid, $check_number, $course_number, $item_number, $cancellation);
        return $response;
    }

    /**
     * Operation cloudPosCheckCancelItemInCourseWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @param int $item_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOItemCancellation $cancellation  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckCancelItemInCourseWithHttpInfo($site_uid, $check_number, $course_number, $item_number, $cancellation)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckCancelItemInCourse');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckCancelItemInCourse');
        }
        // verify the required parameter 'course_number' is set
        if ($course_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_number when calling cloudPosCheckCancelItemInCourse');
        }
        // verify the required parameter 'item_number' is set
        if ($item_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_number when calling cloudPosCheckCancelItemInCourse');
        }
        // verify the required parameter 'cancellation' is set
        if ($cancellation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cancellation when calling cloudPosCheckCancelItemInCourse');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/Items/{itemNumber}/Cancellations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // path params
        if ($course_number !== null) {
            $resourcePath = str_replace(
                "{" . "courseNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_number),
                $resourcePath
            );
        }
        // path params
        if ($item_number !== null) {
            $resourcePath = str_replace(
                "{" . "itemNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($cancellation)) {
            $_tempBody = $cancellation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/Items/{itemNumber}/Cancellations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckDeleteCheck
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckDeleteCheck($site_uid, $check_number)
    {
        list($response) = $this->cloudPosCheckDeleteCheckWithHttpInfo($site_uid, $check_number);
        return $response;
    }

    /**
     * Operation cloudPosCheckDeleteCheckWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckDeleteCheckWithHttpInfo($site_uid, $check_number)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckDeleteCheck');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckDeleteCheck');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckDeleteCourseFromCheck
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckDeleteCourseFromCheck($site_uid, $check_number, $course_number)
    {
        list($response) = $this->cloudPosCheckDeleteCourseFromCheckWithHttpInfo($site_uid, $check_number, $course_number);
        return $response;
    }

    /**
     * Operation cloudPosCheckDeleteCourseFromCheckWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckDeleteCourseFromCheckWithHttpInfo($site_uid, $check_number, $course_number)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckDeleteCourseFromCheck');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckDeleteCourseFromCheck');
        }
        // verify the required parameter 'course_number' is set
        if ($course_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_number when calling cloudPosCheckDeleteCourseFromCheck');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // path params
        if ($course_number !== null) {
            $resourcePath = str_replace(
                "{" . "courseNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckFastTrackCheck
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckFastTrackCheck($site_uid, $check_number)
    {
        list($response) = $this->cloudPosCheckFastTrackCheckWithHttpInfo($site_uid, $check_number);
        return $response;
    }

    /**
     * Operation cloudPosCheckFastTrackCheckWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckFastTrackCheckWithHttpInfo($site_uid, $check_number)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckFastTrackCheck');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckFastTrackCheck');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/FastTracks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/FastTracks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckFastTrackCourse
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckFastTrackCourse($site_uid, $check_number, $course_number)
    {
        list($response) = $this->cloudPosCheckFastTrackCourseWithHttpInfo($site_uid, $check_number, $course_number);
        return $response;
    }

    /**
     * Operation cloudPosCheckFastTrackCourseWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckFastTrackCourseWithHttpInfo($site_uid, $check_number, $course_number)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckFastTrackCourse');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckFastTrackCourse');
        }
        // verify the required parameter 'course_number' is set
        if ($course_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_number when calling cloudPosCheckFastTrackCourse');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/FastTracks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // path params
        if ($course_number !== null) {
            $resourcePath = str_replace(
                "{" . "courseNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/FastTracks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckFastTrackItemInCourse
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @param int $item_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckFastTrackItemInCourse($site_uid, $check_number, $course_number, $item_number)
    {
        list($response) = $this->cloudPosCheckFastTrackItemInCourseWithHttpInfo($site_uid, $check_number, $course_number, $item_number);
        return $response;
    }

    /**
     * Operation cloudPosCheckFastTrackItemInCourseWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @param int $item_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckFastTrackItemInCourseWithHttpInfo($site_uid, $check_number, $course_number, $item_number)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckFastTrackItemInCourse');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckFastTrackItemInCourse');
        }
        // verify the required parameter 'course_number' is set
        if ($course_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_number when calling cloudPosCheckFastTrackItemInCourse');
        }
        // verify the required parameter 'item_number' is set
        if ($item_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_number when calling cloudPosCheckFastTrackItemInCourse');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/Items/{itemNumber}/FastTracks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // path params
        if ($course_number !== null) {
            $resourcePath = str_replace(
                "{" . "courseNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_number),
                $resourcePath
            );
        }
        // path params
        if ($item_number !== null) {
            $resourcePath = str_replace(
                "{" . "itemNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/Items/{itemNumber}/FastTracks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckGetCheckByCheckNumber
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCheckWithKitchenStatus
     */
    public function cloudPosCheckGetCheckByCheckNumber($site_uid, $check_number)
    {
        list($response) = $this->cloudPosCheckGetCheckByCheckNumberWithHttpInfo($site_uid, $check_number);
        return $response;
    }

    /**
     * Operation cloudPosCheckGetCheckByCheckNumberWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCheckWithKitchenStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckGetCheckByCheckNumberWithHttpInfo($site_uid, $check_number)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckGetCheckByCheckNumber');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckGetCheckByCheckNumber');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCheckWithKitchenStatus',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCheckWithKitchenStatus', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCheckWithKitchenStatus', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckUpdateCheck
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCheck $check  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckUpdateCheck($site_uid, $check_number, $check)
    {
        list($response) = $this->cloudPosCheckUpdateCheckWithHttpInfo($site_uid, $check_number, $check);
        return $response;
    }

    /**
     * Operation cloudPosCheckUpdateCheckWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCheck $check  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckUpdateCheckWithHttpInfo($site_uid, $check_number, $check)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckUpdateCheck');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckUpdateCheck');
        }
        // verify the required parameter 'check' is set
        if ($check === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check when calling cloudPosCheckUpdateCheck');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($check)) {
            $_tempBody = $check;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckUpdateCourse
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCourse $course  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckUpdateCourse($site_uid, $check_number, $course_number, $course)
    {
        list($response) = $this->cloudPosCheckUpdateCourseWithHttpInfo($site_uid, $check_number, $course_number, $course);
        return $response;
    }

    /**
     * Operation cloudPosCheckUpdateCourseWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCourse $course  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckUpdateCourseWithHttpInfo($site_uid, $check_number, $course_number, $course)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckUpdateCourse');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckUpdateCourse');
        }
        // verify the required parameter 'course_number' is set
        if ($course_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_number when calling cloudPosCheckUpdateCourse');
        }
        // verify the required parameter 'course' is set
        if ($course === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course when calling cloudPosCheckUpdateCourse');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // path params
        if ($course_number !== null) {
            $resourcePath = str_replace(
                "{" . "courseNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($course)) {
            $_tempBody = $course;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckUpdateCoursesInCheck
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCourse $course  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckUpdateCoursesInCheck($site_uid, $check_number, $course)
    {
        list($response) = $this->cloudPosCheckUpdateCoursesInCheckWithHttpInfo($site_uid, $check_number, $course);
        return $response;
    }

    /**
     * Operation cloudPosCheckUpdateCoursesInCheckWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOCourse $course  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckUpdateCoursesInCheckWithHttpInfo($site_uid, $check_number, $course)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckUpdateCoursesInCheck');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckUpdateCoursesInCheck');
        }
        // verify the required parameter 'course' is set
        if ($course === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course when calling cloudPosCheckUpdateCoursesInCheck');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($course)) {
            $_tempBody = $course;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloudPosCheckUpdateItemInCourse
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @param int $item_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOItem $item  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return \QsrAutomations\Api\Model\SystemObject
     */
    public function cloudPosCheckUpdateItemInCourse($site_uid, $check_number, $course_number, $item_number, $item)
    {
        list($response) = $this->cloudPosCheckUpdateItemInCourseWithHttpInfo($site_uid, $check_number, $course_number, $item_number, $item);
        return $response;
    }

    /**
     * Operation cloudPosCheckUpdateItemInCourseWithHttpInfo
     *
     * @param string $site_uid  (required)
     * @param int $check_number  (required)
     * @param int $course_number  (required)
     * @param int $item_number  (required)
     * @param \QsrAutomations\Api\Model\CloudPosContractBaseClassesCheckDTOItem $item  (required)
     * @throws \QsrAutomations\Api\ApiException on non-2xx response
     * @return array of \QsrAutomations\Api\Model\SystemObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloudPosCheckUpdateItemInCourseWithHttpInfo($site_uid, $check_number, $course_number, $item_number, $item)
    {
        // verify the required parameter 'site_uid' is set
        if ($site_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_uid when calling cloudPosCheckUpdateItemInCourse');
        }
        // verify the required parameter 'check_number' is set
        if ($check_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_number when calling cloudPosCheckUpdateItemInCourse');
        }
        // verify the required parameter 'course_number' is set
        if ($course_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_number when calling cloudPosCheckUpdateItemInCourse');
        }
        // verify the required parameter 'item_number' is set
        if ($item_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_number when calling cloudPosCheckUpdateItemInCourse');
        }
        // verify the required parameter 'item' is set
        if ($item === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item when calling cloudPosCheckUpdateItemInCourse');
        }
        // parse inputs
        $resourcePath = "/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/Items/{itemNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']);

        // path params
        if ($site_uid !== null) {
            $resourcePath = str_replace(
                "{" . "siteUID" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_uid),
                $resourcePath
            );
        }
        // path params
        if ($check_number !== null) {
            $resourcePath = str_replace(
                "{" . "checkNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_number),
                $resourcePath
            );
        }
        // path params
        if ($course_number !== null) {
            $resourcePath = str_replace(
                "{" . "courseNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_number),
                $resourcePath
            );
        }
        // path params
        if ($item_number !== null) {
            $resourcePath = str_replace(
                "{" . "itemNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($item)) {
            $_tempBody = $item;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\QsrAutomations\Api\Model\SystemObject',
                '/Site/{siteUID}/Pos/Checks/{checkNumber}/Courses/{courseNumber}/Items/{itemNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\QsrAutomations\Api\Model\SystemObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\QsrAutomations\Api\Model\SystemObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
