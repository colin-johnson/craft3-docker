<?php
/**
 * QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesBrandsBrandInfoDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QSR Automations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QsrAutomations\Api\Model;

use \ArrayAccess;

/**
 * QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesBrandsBrandInfoDTO Class Doc Comment
 *
 * @category    Class
 * @package     QsrAutomations\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesBrandsBrandInfoDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'QsrAutomations.Enterprise.DineTimeThirdParty.Common.BaseClasses.Brands.BrandInfoDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'brand_uid' => 'string',
        'brand_name' => 'string',
        'primary_cuisine' => 'string',
        'cuisines' => 'string[]',
        'website' => 'string',
        'menu_url' => 'string',
        'nutrition_url' => 'string',
        'price' => 'string',
        'social_media_urls' => '\QsrAutomations\Api\Model\QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesBrandsBrandSocialMediaDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'brand_uid' => null,
        'brand_name' => null,
        'primary_cuisine' => null,
        'cuisines' => null,
        'website' => null,
        'menu_url' => null,
        'nutrition_url' => null,
        'price' => null,
        'social_media_urls' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'brand_uid' => 'BrandUID',
        'brand_name' => 'BrandName',
        'primary_cuisine' => 'PrimaryCuisine',
        'cuisines' => 'Cuisines',
        'website' => 'Website',
        'menu_url' => 'MenuUrl',
        'nutrition_url' => 'NutritionUrl',
        'price' => 'Price',
        'social_media_urls' => 'SocialMediaUrls'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'brand_uid' => 'setBrandUid',
        'brand_name' => 'setBrandName',
        'primary_cuisine' => 'setPrimaryCuisine',
        'cuisines' => 'setCuisines',
        'website' => 'setWebsite',
        'menu_url' => 'setMenuUrl',
        'nutrition_url' => 'setNutritionUrl',
        'price' => 'setPrice',
        'social_media_urls' => 'setSocialMediaUrls'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'brand_uid' => 'getBrandUid',
        'brand_name' => 'getBrandName',
        'primary_cuisine' => 'getPrimaryCuisine',
        'cuisines' => 'getCuisines',
        'website' => 'getWebsite',
        'menu_url' => 'getMenuUrl',
        'nutrition_url' => 'getNutritionUrl',
        'price' => 'getPrice',
        'social_media_urls' => 'getSocialMediaUrls'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['brand_uid'] = isset($data['brand_uid']) ? $data['brand_uid'] : null;
        $this->container['brand_name'] = isset($data['brand_name']) ? $data['brand_name'] : null;
        $this->container['primary_cuisine'] = isset($data['primary_cuisine']) ? $data['primary_cuisine'] : null;
        $this->container['cuisines'] = isset($data['cuisines']) ? $data['cuisines'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['menu_url'] = isset($data['menu_url']) ? $data['menu_url'] : null;
        $this->container['nutrition_url'] = isset($data['nutrition_url']) ? $data['nutrition_url'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['social_media_urls'] = isset($data['social_media_urls']) ? $data['social_media_urls'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets brand_uid
     * @return string
     */
    public function getBrandUid()
    {
        return $this->container['brand_uid'];
    }

    /**
     * Sets brand_uid
     * @param string $brand_uid
     * @return $this
     */
    public function setBrandUid($brand_uid)
    {
        $this->container['brand_uid'] = $brand_uid;

        return $this;
    }

    /**
     * Gets brand_name
     * @return string
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     * @param string $brand_name
     * @return $this
     */
    public function setBrandName($brand_name)
    {
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets primary_cuisine
     * @return string
     */
    public function getPrimaryCuisine()
    {
        return $this->container['primary_cuisine'];
    }

    /**
     * Sets primary_cuisine
     * @param string $primary_cuisine
     * @return $this
     */
    public function setPrimaryCuisine($primary_cuisine)
    {
        $this->container['primary_cuisine'] = $primary_cuisine;

        return $this;
    }

    /**
     * Gets cuisines
     * @return string[]
     */
    public function getCuisines()
    {
        return $this->container['cuisines'];
    }

    /**
     * Sets cuisines
     * @param string[] $cuisines
     * @return $this
     */
    public function setCuisines($cuisines)
    {
        $this->container['cuisines'] = $cuisines;

        return $this;
    }

    /**
     * Gets website
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     * @param string $website
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets menu_url
     * @return string
     */
    public function getMenuUrl()
    {
        return $this->container['menu_url'];
    }

    /**
     * Sets menu_url
     * @param string $menu_url
     * @return $this
     */
    public function setMenuUrl($menu_url)
    {
        $this->container['menu_url'] = $menu_url;

        return $this;
    }

    /**
     * Gets nutrition_url
     * @return string
     */
    public function getNutritionUrl()
    {
        return $this->container['nutrition_url'];
    }

    /**
     * Sets nutrition_url
     * @param string $nutrition_url
     * @return $this
     */
    public function setNutritionUrl($nutrition_url)
    {
        $this->container['nutrition_url'] = $nutrition_url;

        return $this;
    }

    /**
     * Gets price
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param string $price
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets social_media_urls
     * @return \QsrAutomations\Api\Model\QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesBrandsBrandSocialMediaDTO
     */
    public function getSocialMediaUrls()
    {
        return $this->container['social_media_urls'];
    }

    /**
     * Sets social_media_urls
     * @param \QsrAutomations\Api\Model\QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesBrandsBrandSocialMediaDTO $social_media_urls
     * @return $this
     */
    public function setSocialMediaUrls($social_media_urls)
    {
        $this->container['social_media_urls'] = $social_media_urls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


