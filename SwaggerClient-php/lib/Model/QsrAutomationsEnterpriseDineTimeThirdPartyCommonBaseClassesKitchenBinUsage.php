<?php
/**
 * QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesKitchenBinUsage
 *
 * PHP version 5
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QSR Automations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QsrAutomations\Api\Model;

use \ArrayAccess;

/**
 * QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesKitchenBinUsage Class Doc Comment
 *
 * @category    Class
 * @package     QsrAutomations\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesKitchenBinUsage implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'QsrAutomations.Enterprise.DineTimeThirdParty.Common.BaseClasses.Kitchen.BinUsage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'bool',
        'bin_id' => 'int',
        'bin_name' => 'string',
        'dropped' => 'int',
        'minutes_per_day_period' => 'int',
        'period_end_time_local' => '\DateTime',
        'period_end_time_utc' => '\DateTime',
        'period_start_time_local' => '\DateTime',
        'period_start_time_utc' => '\DateTime',
        'system_projection' => 'int',
        'time_stamp_local' => '\DateTime',
        'time_stamp_utc' => '\DateTime',
        'uid' => 'string',
        'used' => 'int',
        'user_projection' => 'int',
        'wasted' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
        'bin_id' => 'int32',
        'bin_name' => null,
        'dropped' => 'int32',
        'minutes_per_day_period' => 'int32',
        'period_end_time_local' => 'date-time',
        'period_end_time_utc' => 'date-time',
        'period_start_time_local' => 'date-time',
        'period_start_time_utc' => 'date-time',
        'system_projection' => 'int32',
        'time_stamp_local' => 'date-time',
        'time_stamp_utc' => 'date-time',
        'uid' => null,
        'used' => 'int32',
        'user_projection' => 'int32',
        'wasted' => 'int32'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'Active',
        'bin_id' => 'BinId',
        'bin_name' => 'BinName',
        'dropped' => 'Dropped',
        'minutes_per_day_period' => 'MinutesPerDayPeriod',
        'period_end_time_local' => 'PeriodEndTimeLocal',
        'period_end_time_utc' => 'PeriodEndTimeUTC',
        'period_start_time_local' => 'PeriodStartTimeLocal',
        'period_start_time_utc' => 'PeriodStartTimeUTC',
        'system_projection' => 'SystemProjection',
        'time_stamp_local' => 'TimeStampLocal',
        'time_stamp_utc' => 'TimeStampUTC',
        'uid' => 'UID',
        'used' => 'Used',
        'user_projection' => 'UserProjection',
        'wasted' => 'Wasted'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'bin_id' => 'setBinId',
        'bin_name' => 'setBinName',
        'dropped' => 'setDropped',
        'minutes_per_day_period' => 'setMinutesPerDayPeriod',
        'period_end_time_local' => 'setPeriodEndTimeLocal',
        'period_end_time_utc' => 'setPeriodEndTimeUtc',
        'period_start_time_local' => 'setPeriodStartTimeLocal',
        'period_start_time_utc' => 'setPeriodStartTimeUtc',
        'system_projection' => 'setSystemProjection',
        'time_stamp_local' => 'setTimeStampLocal',
        'time_stamp_utc' => 'setTimeStampUtc',
        'uid' => 'setUid',
        'used' => 'setUsed',
        'user_projection' => 'setUserProjection',
        'wasted' => 'setWasted'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'bin_id' => 'getBinId',
        'bin_name' => 'getBinName',
        'dropped' => 'getDropped',
        'minutes_per_day_period' => 'getMinutesPerDayPeriod',
        'period_end_time_local' => 'getPeriodEndTimeLocal',
        'period_end_time_utc' => 'getPeriodEndTimeUtc',
        'period_start_time_local' => 'getPeriodStartTimeLocal',
        'period_start_time_utc' => 'getPeriodStartTimeUtc',
        'system_projection' => 'getSystemProjection',
        'time_stamp_local' => 'getTimeStampLocal',
        'time_stamp_utc' => 'getTimeStampUtc',
        'uid' => 'getUid',
        'used' => 'getUsed',
        'user_projection' => 'getUserProjection',
        'wasted' => 'getWasted'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['bin_id'] = isset($data['bin_id']) ? $data['bin_id'] : null;
        $this->container['bin_name'] = isset($data['bin_name']) ? $data['bin_name'] : null;
        $this->container['dropped'] = isset($data['dropped']) ? $data['dropped'] : null;
        $this->container['minutes_per_day_period'] = isset($data['minutes_per_day_period']) ? $data['minutes_per_day_period'] : null;
        $this->container['period_end_time_local'] = isset($data['period_end_time_local']) ? $data['period_end_time_local'] : null;
        $this->container['period_end_time_utc'] = isset($data['period_end_time_utc']) ? $data['period_end_time_utc'] : null;
        $this->container['period_start_time_local'] = isset($data['period_start_time_local']) ? $data['period_start_time_local'] : null;
        $this->container['period_start_time_utc'] = isset($data['period_start_time_utc']) ? $data['period_start_time_utc'] : null;
        $this->container['system_projection'] = isset($data['system_projection']) ? $data['system_projection'] : null;
        $this->container['time_stamp_local'] = isset($data['time_stamp_local']) ? $data['time_stamp_local'] : null;
        $this->container['time_stamp_utc'] = isset($data['time_stamp_utc']) ? $data['time_stamp_utc'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['used'] = isset($data['used']) ? $data['used'] : null;
        $this->container['user_projection'] = isset($data['user_projection']) ? $data['user_projection'] : null;
        $this->container['wasted'] = isset($data['wasted']) ? $data['wasted'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets active
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param bool $active
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets bin_id
     * @return int
     */
    public function getBinId()
    {
        return $this->container['bin_id'];
    }

    /**
     * Sets bin_id
     * @param int $bin_id
     * @return $this
     */
    public function setBinId($bin_id)
    {
        $this->container['bin_id'] = $bin_id;

        return $this;
    }

    /**
     * Gets bin_name
     * @return string
     */
    public function getBinName()
    {
        return $this->container['bin_name'];
    }

    /**
     * Sets bin_name
     * @param string $bin_name
     * @return $this
     */
    public function setBinName($bin_name)
    {
        $this->container['bin_name'] = $bin_name;

        return $this;
    }

    /**
     * Gets dropped
     * @return int
     */
    public function getDropped()
    {
        return $this->container['dropped'];
    }

    /**
     * Sets dropped
     * @param int $dropped
     * @return $this
     */
    public function setDropped($dropped)
    {
        $this->container['dropped'] = $dropped;

        return $this;
    }

    /**
     * Gets minutes_per_day_period
     * @return int
     */
    public function getMinutesPerDayPeriod()
    {
        return $this->container['minutes_per_day_period'];
    }

    /**
     * Sets minutes_per_day_period
     * @param int $minutes_per_day_period
     * @return $this
     */
    public function setMinutesPerDayPeriod($minutes_per_day_period)
    {
        $this->container['minutes_per_day_period'] = $minutes_per_day_period;

        return $this;
    }

    /**
     * Gets period_end_time_local
     * @return \DateTime
     */
    public function getPeriodEndTimeLocal()
    {
        return $this->container['period_end_time_local'];
    }

    /**
     * Sets period_end_time_local
     * @param \DateTime $period_end_time_local
     * @return $this
     */
    public function setPeriodEndTimeLocal($period_end_time_local)
    {
        $this->container['period_end_time_local'] = $period_end_time_local;

        return $this;
    }

    /**
     * Gets period_end_time_utc
     * @return \DateTime
     */
    public function getPeriodEndTimeUtc()
    {
        return $this->container['period_end_time_utc'];
    }

    /**
     * Sets period_end_time_utc
     * @param \DateTime $period_end_time_utc
     * @return $this
     */
    public function setPeriodEndTimeUtc($period_end_time_utc)
    {
        $this->container['period_end_time_utc'] = $period_end_time_utc;

        return $this;
    }

    /**
     * Gets period_start_time_local
     * @return \DateTime
     */
    public function getPeriodStartTimeLocal()
    {
        return $this->container['period_start_time_local'];
    }

    /**
     * Sets period_start_time_local
     * @param \DateTime $period_start_time_local
     * @return $this
     */
    public function setPeriodStartTimeLocal($period_start_time_local)
    {
        $this->container['period_start_time_local'] = $period_start_time_local;

        return $this;
    }

    /**
     * Gets period_start_time_utc
     * @return \DateTime
     */
    public function getPeriodStartTimeUtc()
    {
        return $this->container['period_start_time_utc'];
    }

    /**
     * Sets period_start_time_utc
     * @param \DateTime $period_start_time_utc
     * @return $this
     */
    public function setPeriodStartTimeUtc($period_start_time_utc)
    {
        $this->container['period_start_time_utc'] = $period_start_time_utc;

        return $this;
    }

    /**
     * Gets system_projection
     * @return int
     */
    public function getSystemProjection()
    {
        return $this->container['system_projection'];
    }

    /**
     * Sets system_projection
     * @param int $system_projection
     * @return $this
     */
    public function setSystemProjection($system_projection)
    {
        $this->container['system_projection'] = $system_projection;

        return $this;
    }

    /**
     * Gets time_stamp_local
     * @return \DateTime
     */
    public function getTimeStampLocal()
    {
        return $this->container['time_stamp_local'];
    }

    /**
     * Sets time_stamp_local
     * @param \DateTime $time_stamp_local
     * @return $this
     */
    public function setTimeStampLocal($time_stamp_local)
    {
        $this->container['time_stamp_local'] = $time_stamp_local;

        return $this;
    }

    /**
     * Gets time_stamp_utc
     * @return \DateTime
     */
    public function getTimeStampUtc()
    {
        return $this->container['time_stamp_utc'];
    }

    /**
     * Sets time_stamp_utc
     * @param \DateTime $time_stamp_utc
     * @return $this
     */
    public function setTimeStampUtc($time_stamp_utc)
    {
        $this->container['time_stamp_utc'] = $time_stamp_utc;

        return $this;
    }

    /**
     * Gets uid
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     * @param string $uid
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets used
     * @return int
     */
    public function getUsed()
    {
        return $this->container['used'];
    }

    /**
     * Sets used
     * @param int $used
     * @return $this
     */
    public function setUsed($used)
    {
        $this->container['used'] = $used;

        return $this;
    }

    /**
     * Gets user_projection
     * @return int
     */
    public function getUserProjection()
    {
        return $this->container['user_projection'];
    }

    /**
     * Sets user_projection
     * @param int $user_projection
     * @return $this
     */
    public function setUserProjection($user_projection)
    {
        $this->container['user_projection'] = $user_projection;

        return $this;
    }

    /**
     * Gets wasted
     * @return int
     */
    public function getWasted()
    {
        return $this->container['wasted'];
    }

    /**
     * Sets wasted
     * @param int $wasted
     * @return $this
     */
    public function setWasted($wasted)
    {
        $this->container['wasted'] = $wasted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


