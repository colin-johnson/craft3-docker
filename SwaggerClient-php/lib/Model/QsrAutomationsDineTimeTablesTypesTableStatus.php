<?php
/**
 * QsrAutomationsDineTimeTablesTypesTableStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QSR Automations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QsrAutomations\Api\Model;

use \ArrayAccess;

/**
 * QsrAutomationsDineTimeTablesTypesTableStatus Class Doc Comment
 *
 * @category    Class
 * @package     QsrAutomations\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QsrAutomationsDineTimeTablesTypesTableStatus implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'QsrAutomations.DineTime.Tables.Types.TableStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_dirty' => 'bool',
        'opened_time' => '\DateTime',
        'closed_time' => '\DateTime',
        'dirty_time' => '\DateTime',
        'cleaned_time' => '\DateTime',
        'last_seated_time' => '\DateTime',
        'last_completed_time' => '\DateTime',
        'last_available_time' => '\DateTime',
        'status' => 'int',
        'id' => 'string',
        'last_update' => '\DateTime',
        'name' => 'string',
        'seat_count' => 'int',
        'minimum_seat_count' => 'int',
        'maximum_seat_count' => 'int',
        'is_active' => 'bool',
        'seating_area_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_dirty' => null,
        'opened_time' => 'date-time',
        'closed_time' => 'date-time',
        'dirty_time' => 'date-time',
        'cleaned_time' => 'date-time',
        'last_seated_time' => 'date-time',
        'last_completed_time' => 'date-time',
        'last_available_time' => 'date-time',
        'status' => 'int32',
        'id' => null,
        'last_update' => 'date-time',
        'name' => null,
        'seat_count' => 'int32',
        'minimum_seat_count' => 'int32',
        'maximum_seat_count' => 'int32',
        'is_active' => null,
        'seating_area_id' => 'int32'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'is_dirty' => 'IsDirty',
        'opened_time' => 'OpenedTime',
        'closed_time' => 'ClosedTime',
        'dirty_time' => 'DirtyTime',
        'cleaned_time' => 'CleanedTime',
        'last_seated_time' => 'LastSeatedTime',
        'last_completed_time' => 'LastCompletedTime',
        'last_available_time' => 'LastAvailableTime',
        'status' => 'Status',
        'id' => 'ID',
        'last_update' => 'LastUpdate',
        'name' => 'Name',
        'seat_count' => 'SeatCount',
        'minimum_seat_count' => 'MinimumSeatCount',
        'maximum_seat_count' => 'MaximumSeatCount',
        'is_active' => 'IsActive',
        'seating_area_id' => 'SeatingAreaId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'is_dirty' => 'setIsDirty',
        'opened_time' => 'setOpenedTime',
        'closed_time' => 'setClosedTime',
        'dirty_time' => 'setDirtyTime',
        'cleaned_time' => 'setCleanedTime',
        'last_seated_time' => 'setLastSeatedTime',
        'last_completed_time' => 'setLastCompletedTime',
        'last_available_time' => 'setLastAvailableTime',
        'status' => 'setStatus',
        'id' => 'setId',
        'last_update' => 'setLastUpdate',
        'name' => 'setName',
        'seat_count' => 'setSeatCount',
        'minimum_seat_count' => 'setMinimumSeatCount',
        'maximum_seat_count' => 'setMaximumSeatCount',
        'is_active' => 'setIsActive',
        'seating_area_id' => 'setSeatingAreaId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'is_dirty' => 'getIsDirty',
        'opened_time' => 'getOpenedTime',
        'closed_time' => 'getClosedTime',
        'dirty_time' => 'getDirtyTime',
        'cleaned_time' => 'getCleanedTime',
        'last_seated_time' => 'getLastSeatedTime',
        'last_completed_time' => 'getLastCompletedTime',
        'last_available_time' => 'getLastAvailableTime',
        'status' => 'getStatus',
        'id' => 'getId',
        'last_update' => 'getLastUpdate',
        'name' => 'getName',
        'seat_count' => 'getSeatCount',
        'minimum_seat_count' => 'getMinimumSeatCount',
        'maximum_seat_count' => 'getMaximumSeatCount',
        'is_active' => 'getIsActive',
        'seating_area_id' => 'getSeatingAreaId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_1 = 1;
    const STATUS_2 = 2;
    const STATUS_3 = 3;
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_1,
            self::STATUS_2,
            self::STATUS_3,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_dirty'] = isset($data['is_dirty']) ? $data['is_dirty'] : null;
        $this->container['opened_time'] = isset($data['opened_time']) ? $data['opened_time'] : null;
        $this->container['closed_time'] = isset($data['closed_time']) ? $data['closed_time'] : null;
        $this->container['dirty_time'] = isset($data['dirty_time']) ? $data['dirty_time'] : null;
        $this->container['cleaned_time'] = isset($data['cleaned_time']) ? $data['cleaned_time'] : null;
        $this->container['last_seated_time'] = isset($data['last_seated_time']) ? $data['last_seated_time'] : null;
        $this->container['last_completed_time'] = isset($data['last_completed_time']) ? $data['last_completed_time'] : null;
        $this->container['last_available_time'] = isset($data['last_available_time']) ? $data['last_available_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_update'] = isset($data['last_update']) ? $data['last_update'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['seat_count'] = isset($data['seat_count']) ? $data['seat_count'] : null;
        $this->container['minimum_seat_count'] = isset($data['minimum_seat_count']) ? $data['minimum_seat_count'] : null;
        $this->container['maximum_seat_count'] = isset($data['maximum_seat_count']) ? $data['maximum_seat_count'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['seating_area_id'] = isset($data['seating_area_id']) ? $data['seating_area_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets is_dirty
     * @return bool
     */
    public function getIsDirty()
    {
        return $this->container['is_dirty'];
    }

    /**
     * Sets is_dirty
     * @param bool $is_dirty
     * @return $this
     */
    public function setIsDirty($is_dirty)
    {
        $this->container['is_dirty'] = $is_dirty;

        return $this;
    }

    /**
     * Gets opened_time
     * @return \DateTime
     */
    public function getOpenedTime()
    {
        return $this->container['opened_time'];
    }

    /**
     * Sets opened_time
     * @param \DateTime $opened_time
     * @return $this
     */
    public function setOpenedTime($opened_time)
    {
        $this->container['opened_time'] = $opened_time;

        return $this;
    }

    /**
     * Gets closed_time
     * @return \DateTime
     */
    public function getClosedTime()
    {
        return $this->container['closed_time'];
    }

    /**
     * Sets closed_time
     * @param \DateTime $closed_time
     * @return $this
     */
    public function setClosedTime($closed_time)
    {
        $this->container['closed_time'] = $closed_time;

        return $this;
    }

    /**
     * Gets dirty_time
     * @return \DateTime
     */
    public function getDirtyTime()
    {
        return $this->container['dirty_time'];
    }

    /**
     * Sets dirty_time
     * @param \DateTime $dirty_time
     * @return $this
     */
    public function setDirtyTime($dirty_time)
    {
        $this->container['dirty_time'] = $dirty_time;

        return $this;
    }

    /**
     * Gets cleaned_time
     * @return \DateTime
     */
    public function getCleanedTime()
    {
        return $this->container['cleaned_time'];
    }

    /**
     * Sets cleaned_time
     * @param \DateTime $cleaned_time
     * @return $this
     */
    public function setCleanedTime($cleaned_time)
    {
        $this->container['cleaned_time'] = $cleaned_time;

        return $this;
    }

    /**
     * Gets last_seated_time
     * @return \DateTime
     */
    public function getLastSeatedTime()
    {
        return $this->container['last_seated_time'];
    }

    /**
     * Sets last_seated_time
     * @param \DateTime $last_seated_time
     * @return $this
     */
    public function setLastSeatedTime($last_seated_time)
    {
        $this->container['last_seated_time'] = $last_seated_time;

        return $this;
    }

    /**
     * Gets last_completed_time
     * @return \DateTime
     */
    public function getLastCompletedTime()
    {
        return $this->container['last_completed_time'];
    }

    /**
     * Sets last_completed_time
     * @param \DateTime $last_completed_time
     * @return $this
     */
    public function setLastCompletedTime($last_completed_time)
    {
        $this->container['last_completed_time'] = $last_completed_time;

        return $this;
    }

    /**
     * Gets last_available_time
     * @return \DateTime
     */
    public function getLastAvailableTime()
    {
        return $this->container['last_available_time'];
    }

    /**
     * Sets last_available_time
     * @param \DateTime $last_available_time
     * @return $this
     */
    public function setLastAvailableTime($last_available_time)
    {
        $this->container['last_available_time'] = $last_available_time;

        return $this;
    }

    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_update
     * @return \DateTime
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     * @param \DateTime $last_update
     * @return $this
     */
    public function setLastUpdate($last_update)
    {
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets seat_count
     * @return int
     */
    public function getSeatCount()
    {
        return $this->container['seat_count'];
    }

    /**
     * Sets seat_count
     * @param int $seat_count
     * @return $this
     */
    public function setSeatCount($seat_count)
    {
        $this->container['seat_count'] = $seat_count;

        return $this;
    }

    /**
     * Gets minimum_seat_count
     * @return int
     */
    public function getMinimumSeatCount()
    {
        return $this->container['minimum_seat_count'];
    }

    /**
     * Sets minimum_seat_count
     * @param int $minimum_seat_count
     * @return $this
     */
    public function setMinimumSeatCount($minimum_seat_count)
    {
        $this->container['minimum_seat_count'] = $minimum_seat_count;

        return $this;
    }

    /**
     * Gets maximum_seat_count
     * @return int
     */
    public function getMaximumSeatCount()
    {
        return $this->container['maximum_seat_count'];
    }

    /**
     * Sets maximum_seat_count
     * @param int $maximum_seat_count
     * @return $this
     */
    public function setMaximumSeatCount($maximum_seat_count)
    {
        $this->container['maximum_seat_count'] = $maximum_seat_count;

        return $this;
    }

    /**
     * Gets is_active
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     * @param bool $is_active
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets seating_area_id
     * @return int
     */
    public function getSeatingAreaId()
    {
        return $this->container['seating_area_id'];
    }

    /**
     * Sets seating_area_id
     * @param int $seating_area_id
     * @return $this
     */
    public function setSeatingAreaId($seating_area_id)
    {
        $this->container['seating_area_id'] = $seating_area_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


