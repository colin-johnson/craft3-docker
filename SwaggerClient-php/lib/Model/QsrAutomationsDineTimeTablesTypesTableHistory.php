<?php
/**
 * QsrAutomationsDineTimeTablesTypesTableHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QSR Automations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QsrAutomations\Api\Model;

use \ArrayAccess;

/**
 * QsrAutomationsDineTimeTablesTypesTableHistory Class Doc Comment
 *
 * @category    Class
 * @package     QsrAutomations\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QsrAutomationsDineTimeTablesTypesTableHistory implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'QsrAutomations.DineTime.Tables.Types.TableHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'visit' => '\QsrAutomations\Api\Model\QsrAutomationsDineTimeVisitsTypesVisit',
        'created_date' => '\DateTime',
        'cleaned_time' => '\DateTime',
        'dirtied_time' => '\DateTime',
        'station_name' => 'string',
        'floor_plan_name' => 'string',
        'shift_name' => 'string',
        'operating_period_name' => 'string',
        'visit_uid' => 'string',
        'team_member_uid' => 'string',
        'last_update' => '\DateTime',
        'server_last_update' => '\DateTime',
        'id' => 'string',
        'name' => 'string',
        'seat_count' => 'int',
        'minimum_seat_count' => 'int',
        'maximum_seat_count' => 'int',
        'is_active' => 'bool',
        'seating_area_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'visit' => null,
        'created_date' => 'date-time',
        'cleaned_time' => 'date-time',
        'dirtied_time' => 'date-time',
        'station_name' => null,
        'floor_plan_name' => null,
        'shift_name' => null,
        'operating_period_name' => null,
        'visit_uid' => null,
        'team_member_uid' => null,
        'last_update' => 'date-time',
        'server_last_update' => 'date-time',
        'id' => null,
        'name' => null,
        'seat_count' => 'int32',
        'minimum_seat_count' => 'int32',
        'maximum_seat_count' => 'int32',
        'is_active' => null,
        'seating_area_id' => 'int32'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'visit' => 'Visit',
        'created_date' => 'CreatedDate',
        'cleaned_time' => 'CleanedTime',
        'dirtied_time' => 'DirtiedTime',
        'station_name' => 'StationName',
        'floor_plan_name' => 'FloorPlanName',
        'shift_name' => 'ShiftName',
        'operating_period_name' => 'OperatingPeriodName',
        'visit_uid' => 'VisitUID',
        'team_member_uid' => 'TeamMemberUID',
        'last_update' => 'LastUpdate',
        'server_last_update' => 'ServerLastUpdate',
        'id' => 'ID',
        'name' => 'Name',
        'seat_count' => 'SeatCount',
        'minimum_seat_count' => 'MinimumSeatCount',
        'maximum_seat_count' => 'MaximumSeatCount',
        'is_active' => 'IsActive',
        'seating_area_id' => 'SeatingAreaId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'visit' => 'setVisit',
        'created_date' => 'setCreatedDate',
        'cleaned_time' => 'setCleanedTime',
        'dirtied_time' => 'setDirtiedTime',
        'station_name' => 'setStationName',
        'floor_plan_name' => 'setFloorPlanName',
        'shift_name' => 'setShiftName',
        'operating_period_name' => 'setOperatingPeriodName',
        'visit_uid' => 'setVisitUid',
        'team_member_uid' => 'setTeamMemberUid',
        'last_update' => 'setLastUpdate',
        'server_last_update' => 'setServerLastUpdate',
        'id' => 'setId',
        'name' => 'setName',
        'seat_count' => 'setSeatCount',
        'minimum_seat_count' => 'setMinimumSeatCount',
        'maximum_seat_count' => 'setMaximumSeatCount',
        'is_active' => 'setIsActive',
        'seating_area_id' => 'setSeatingAreaId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'visit' => 'getVisit',
        'created_date' => 'getCreatedDate',
        'cleaned_time' => 'getCleanedTime',
        'dirtied_time' => 'getDirtiedTime',
        'station_name' => 'getStationName',
        'floor_plan_name' => 'getFloorPlanName',
        'shift_name' => 'getShiftName',
        'operating_period_name' => 'getOperatingPeriodName',
        'visit_uid' => 'getVisitUid',
        'team_member_uid' => 'getTeamMemberUid',
        'last_update' => 'getLastUpdate',
        'server_last_update' => 'getServerLastUpdate',
        'id' => 'getId',
        'name' => 'getName',
        'seat_count' => 'getSeatCount',
        'minimum_seat_count' => 'getMinimumSeatCount',
        'maximum_seat_count' => 'getMaximumSeatCount',
        'is_active' => 'getIsActive',
        'seating_area_id' => 'getSeatingAreaId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['visit'] = isset($data['visit']) ? $data['visit'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['cleaned_time'] = isset($data['cleaned_time']) ? $data['cleaned_time'] : null;
        $this->container['dirtied_time'] = isset($data['dirtied_time']) ? $data['dirtied_time'] : null;
        $this->container['station_name'] = isset($data['station_name']) ? $data['station_name'] : null;
        $this->container['floor_plan_name'] = isset($data['floor_plan_name']) ? $data['floor_plan_name'] : null;
        $this->container['shift_name'] = isset($data['shift_name']) ? $data['shift_name'] : null;
        $this->container['operating_period_name'] = isset($data['operating_period_name']) ? $data['operating_period_name'] : null;
        $this->container['visit_uid'] = isset($data['visit_uid']) ? $data['visit_uid'] : null;
        $this->container['team_member_uid'] = isset($data['team_member_uid']) ? $data['team_member_uid'] : null;
        $this->container['last_update'] = isset($data['last_update']) ? $data['last_update'] : null;
        $this->container['server_last_update'] = isset($data['server_last_update']) ? $data['server_last_update'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['seat_count'] = isset($data['seat_count']) ? $data['seat_count'] : null;
        $this->container['minimum_seat_count'] = isset($data['minimum_seat_count']) ? $data['minimum_seat_count'] : null;
        $this->container['maximum_seat_count'] = isset($data['maximum_seat_count']) ? $data['maximum_seat_count'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['seating_area_id'] = isset($data['seating_area_id']) ? $data['seating_area_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets visit
     * @return \QsrAutomations\Api\Model\QsrAutomationsDineTimeVisitsTypesVisit
     */
    public function getVisit()
    {
        return $this->container['visit'];
    }

    /**
     * Sets visit
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeVisitsTypesVisit $visit
     * @return $this
     */
    public function setVisit($visit)
    {
        $this->container['visit'] = $visit;

        return $this;
    }

    /**
     * Gets created_date
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     * @param \DateTime $created_date
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets cleaned_time
     * @return \DateTime
     */
    public function getCleanedTime()
    {
        return $this->container['cleaned_time'];
    }

    /**
     * Sets cleaned_time
     * @param \DateTime $cleaned_time
     * @return $this
     */
    public function setCleanedTime($cleaned_time)
    {
        $this->container['cleaned_time'] = $cleaned_time;

        return $this;
    }

    /**
     * Gets dirtied_time
     * @return \DateTime
     */
    public function getDirtiedTime()
    {
        return $this->container['dirtied_time'];
    }

    /**
     * Sets dirtied_time
     * @param \DateTime $dirtied_time
     * @return $this
     */
    public function setDirtiedTime($dirtied_time)
    {
        $this->container['dirtied_time'] = $dirtied_time;

        return $this;
    }

    /**
     * Gets station_name
     * @return string
     */
    public function getStationName()
    {
        return $this->container['station_name'];
    }

    /**
     * Sets station_name
     * @param string $station_name
     * @return $this
     */
    public function setStationName($station_name)
    {
        $this->container['station_name'] = $station_name;

        return $this;
    }

    /**
     * Gets floor_plan_name
     * @return string
     */
    public function getFloorPlanName()
    {
        return $this->container['floor_plan_name'];
    }

    /**
     * Sets floor_plan_name
     * @param string $floor_plan_name
     * @return $this
     */
    public function setFloorPlanName($floor_plan_name)
    {
        $this->container['floor_plan_name'] = $floor_plan_name;

        return $this;
    }

    /**
     * Gets shift_name
     * @return string
     */
    public function getShiftName()
    {
        return $this->container['shift_name'];
    }

    /**
     * Sets shift_name
     * @param string $shift_name
     * @return $this
     */
    public function setShiftName($shift_name)
    {
        $this->container['shift_name'] = $shift_name;

        return $this;
    }

    /**
     * Gets operating_period_name
     * @return string
     */
    public function getOperatingPeriodName()
    {
        return $this->container['operating_period_name'];
    }

    /**
     * Sets operating_period_name
     * @param string $operating_period_name
     * @return $this
     */
    public function setOperatingPeriodName($operating_period_name)
    {
        $this->container['operating_period_name'] = $operating_period_name;

        return $this;
    }

    /**
     * Gets visit_uid
     * @return string
     */
    public function getVisitUid()
    {
        return $this->container['visit_uid'];
    }

    /**
     * Sets visit_uid
     * @param string $visit_uid
     * @return $this
     */
    public function setVisitUid($visit_uid)
    {
        $this->container['visit_uid'] = $visit_uid;

        return $this;
    }

    /**
     * Gets team_member_uid
     * @return string
     */
    public function getTeamMemberUid()
    {
        return $this->container['team_member_uid'];
    }

    /**
     * Sets team_member_uid
     * @param string $team_member_uid
     * @return $this
     */
    public function setTeamMemberUid($team_member_uid)
    {
        $this->container['team_member_uid'] = $team_member_uid;

        return $this;
    }

    /**
     * Gets last_update
     * @return \DateTime
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     * @param \DateTime $last_update
     * @return $this
     */
    public function setLastUpdate($last_update)
    {
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets server_last_update
     * @return \DateTime
     */
    public function getServerLastUpdate()
    {
        return $this->container['server_last_update'];
    }

    /**
     * Sets server_last_update
     * @param \DateTime $server_last_update
     * @return $this
     */
    public function setServerLastUpdate($server_last_update)
    {
        $this->container['server_last_update'] = $server_last_update;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets seat_count
     * @return int
     */
    public function getSeatCount()
    {
        return $this->container['seat_count'];
    }

    /**
     * Sets seat_count
     * @param int $seat_count
     * @return $this
     */
    public function setSeatCount($seat_count)
    {
        $this->container['seat_count'] = $seat_count;

        return $this;
    }

    /**
     * Gets minimum_seat_count
     * @return int
     */
    public function getMinimumSeatCount()
    {
        return $this->container['minimum_seat_count'];
    }

    /**
     * Sets minimum_seat_count
     * @param int $minimum_seat_count
     * @return $this
     */
    public function setMinimumSeatCount($minimum_seat_count)
    {
        $this->container['minimum_seat_count'] = $minimum_seat_count;

        return $this;
    }

    /**
     * Gets maximum_seat_count
     * @return int
     */
    public function getMaximumSeatCount()
    {
        return $this->container['maximum_seat_count'];
    }

    /**
     * Sets maximum_seat_count
     * @param int $maximum_seat_count
     * @return $this
     */
    public function setMaximumSeatCount($maximum_seat_count)
    {
        $this->container['maximum_seat_count'] = $maximum_seat_count;

        return $this;
    }

    /**
     * Gets is_active
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     * @param bool $is_active
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets seating_area_id
     * @return int
     */
    public function getSeatingAreaId()
    {
        return $this->container['seating_area_id'];
    }

    /**
     * Sets seating_area_id
     * @param int $seating_area_id
     * @return $this
     */
    public function setSeatingAreaId($seating_area_id)
    {
        $this->container['seating_area_id'] = $seating_area_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


