<?php
/**
 * QsrAutomationsDineTimeTableTypesTableSnapshotDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QSR Automations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QsrAutomations\Api\Model;

use \ArrayAccess;

/**
 * QsrAutomationsDineTimeTableTypesTableSnapshotDTO Class Doc Comment
 *
 * @category    Class
 * @package     QsrAutomations\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QsrAutomationsDineTimeTableTypesTableSnapshotDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'QsrAutomations.DineTime.Table.Types.TableSnapshotDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uid' => 'string',
        'name' => 'string',
        'seat_count' => 'int',
        'min_seat_count' => 'int',
        'max_seat_count' => 'int',
        'end_seats' => 'bool',
        'qsr_table_shape_id' => 'int',
        'statistics' => '\QsrAutomations\Api\Model\QsrAutomationsDineTimeTableTypesTableStatisticSnapshotDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uid' => null,
        'name' => null,
        'seat_count' => 'int32',
        'min_seat_count' => 'int32',
        'max_seat_count' => 'int32',
        'end_seats' => null,
        'qsr_table_shape_id' => 'int32',
        'statistics' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'uid' => 'UID',
        'name' => 'Name',
        'seat_count' => 'SeatCount',
        'min_seat_count' => 'MinSeatCount',
        'max_seat_count' => 'MaxSeatCount',
        'end_seats' => 'EndSeats',
        'qsr_table_shape_id' => 'QsrTableShapeID',
        'statistics' => 'Statistics'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'uid' => 'setUid',
        'name' => 'setName',
        'seat_count' => 'setSeatCount',
        'min_seat_count' => 'setMinSeatCount',
        'max_seat_count' => 'setMaxSeatCount',
        'end_seats' => 'setEndSeats',
        'qsr_table_shape_id' => 'setQsrTableShapeId',
        'statistics' => 'setStatistics'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'uid' => 'getUid',
        'name' => 'getName',
        'seat_count' => 'getSeatCount',
        'min_seat_count' => 'getMinSeatCount',
        'max_seat_count' => 'getMaxSeatCount',
        'end_seats' => 'getEndSeats',
        'qsr_table_shape_id' => 'getQsrTableShapeId',
        'statistics' => 'getStatistics'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['seat_count'] = isset($data['seat_count']) ? $data['seat_count'] : null;
        $this->container['min_seat_count'] = isset($data['min_seat_count']) ? $data['min_seat_count'] : null;
        $this->container['max_seat_count'] = isset($data['max_seat_count']) ? $data['max_seat_count'] : null;
        $this->container['end_seats'] = isset($data['end_seats']) ? $data['end_seats'] : null;
        $this->container['qsr_table_shape_id'] = isset($data['qsr_table_shape_id']) ? $data['qsr_table_shape_id'] : null;
        $this->container['statistics'] = isset($data['statistics']) ? $data['statistics'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets uid
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     * @param string $uid
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets seat_count
     * @return int
     */
    public function getSeatCount()
    {
        return $this->container['seat_count'];
    }

    /**
     * Sets seat_count
     * @param int $seat_count
     * @return $this
     */
    public function setSeatCount($seat_count)
    {
        $this->container['seat_count'] = $seat_count;

        return $this;
    }

    /**
     * Gets min_seat_count
     * @return int
     */
    public function getMinSeatCount()
    {
        return $this->container['min_seat_count'];
    }

    /**
     * Sets min_seat_count
     * @param int $min_seat_count
     * @return $this
     */
    public function setMinSeatCount($min_seat_count)
    {
        $this->container['min_seat_count'] = $min_seat_count;

        return $this;
    }

    /**
     * Gets max_seat_count
     * @return int
     */
    public function getMaxSeatCount()
    {
        return $this->container['max_seat_count'];
    }

    /**
     * Sets max_seat_count
     * @param int $max_seat_count
     * @return $this
     */
    public function setMaxSeatCount($max_seat_count)
    {
        $this->container['max_seat_count'] = $max_seat_count;

        return $this;
    }

    /**
     * Gets end_seats
     * @return bool
     */
    public function getEndSeats()
    {
        return $this->container['end_seats'];
    }

    /**
     * Sets end_seats
     * @param bool $end_seats
     * @return $this
     */
    public function setEndSeats($end_seats)
    {
        $this->container['end_seats'] = $end_seats;

        return $this;
    }

    /**
     * Gets qsr_table_shape_id
     * @return int
     */
    public function getQsrTableShapeId()
    {
        return $this->container['qsr_table_shape_id'];
    }

    /**
     * Sets qsr_table_shape_id
     * @param int $qsr_table_shape_id
     * @return $this
     */
    public function setQsrTableShapeId($qsr_table_shape_id)
    {
        $this->container['qsr_table_shape_id'] = $qsr_table_shape_id;

        return $this;
    }

    /**
     * Gets statistics
     * @return \QsrAutomations\Api\Model\QsrAutomationsDineTimeTableTypesTableStatisticSnapshotDTO
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     * @param \QsrAutomations\Api\Model\QsrAutomationsDineTimeTableTypesTableStatisticSnapshotDTO $statistics
     * @return $this
     */
    public function setStatistics($statistics)
    {
        $this->container['statistics'] = $statistics;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


