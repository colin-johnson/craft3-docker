<?php
/**
 * QsrAutomationsDineTimeGuestsQuerySearchGuestBookQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QSR Automations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QsrAutomations\Api\Model;

use \ArrayAccess;

/**
 * QsrAutomationsDineTimeGuestsQuerySearchGuestBookQuery Class Doc Comment
 *
 * @category    Class
 * @package     QsrAutomations\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QsrAutomationsDineTimeGuestsQuerySearchGuestBookQuery implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'QsrAutomations.DineTime.Guests.Query.SearchGuestBookQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'guest_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'city' => 'string',
        'state' => 'string',
        'postal_code' => 'string',
        'mobile_phone_number' => 'string',
        'e164_country_code' => 'string',
        'loyalty_card_id' => 'string',
        'guests_per_page' => 'int',
        'page_number' => 'int',
        'request_time' => '\DateTime',
        'site_identifier' => 'string',
        'brand_uid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'guest_id' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'city' => null,
        'state' => null,
        'postal_code' => null,
        'mobile_phone_number' => null,
        'e164_country_code' => null,
        'loyalty_card_id' => null,
        'guests_per_page' => 'int32',
        'page_number' => 'int32',
        'request_time' => 'date-time',
        'site_identifier' => null,
        'brand_uid' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'guest_id' => 'GuestId',
        'first_name' => 'FirstName',
        'last_name' => 'LastName',
        'email' => 'Email',
        'city' => 'City',
        'state' => 'State',
        'postal_code' => 'PostalCode',
        'mobile_phone_number' => 'MobilePhoneNumber',
        'e164_country_code' => 'E164CountryCode',
        'loyalty_card_id' => 'LoyaltyCardID',
        'guests_per_page' => 'GuestsPerPage',
        'page_number' => 'PageNumber',
        'request_time' => 'RequestTime',
        'site_identifier' => 'SiteIdentifier',
        'brand_uid' => 'BrandUID'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'guest_id' => 'setGuestId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'city' => 'setCity',
        'state' => 'setState',
        'postal_code' => 'setPostalCode',
        'mobile_phone_number' => 'setMobilePhoneNumber',
        'e164_country_code' => 'setE164CountryCode',
        'loyalty_card_id' => 'setLoyaltyCardId',
        'guests_per_page' => 'setGuestsPerPage',
        'page_number' => 'setPageNumber',
        'request_time' => 'setRequestTime',
        'site_identifier' => 'setSiteIdentifier',
        'brand_uid' => 'setBrandUid'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'guest_id' => 'getGuestId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'city' => 'getCity',
        'state' => 'getState',
        'postal_code' => 'getPostalCode',
        'mobile_phone_number' => 'getMobilePhoneNumber',
        'e164_country_code' => 'getE164CountryCode',
        'loyalty_card_id' => 'getLoyaltyCardId',
        'guests_per_page' => 'getGuestsPerPage',
        'page_number' => 'getPageNumber',
        'request_time' => 'getRequestTime',
        'site_identifier' => 'getSiteIdentifier',
        'brand_uid' => 'getBrandUid'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['guest_id'] = isset($data['guest_id']) ? $data['guest_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['mobile_phone_number'] = isset($data['mobile_phone_number']) ? $data['mobile_phone_number'] : null;
        $this->container['e164_country_code'] = isset($data['e164_country_code']) ? $data['e164_country_code'] : null;
        $this->container['loyalty_card_id'] = isset($data['loyalty_card_id']) ? $data['loyalty_card_id'] : null;
        $this->container['guests_per_page'] = isset($data['guests_per_page']) ? $data['guests_per_page'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['request_time'] = isset($data['request_time']) ? $data['request_time'] : null;
        $this->container['site_identifier'] = isset($data['site_identifier']) ? $data['site_identifier'] : null;
        $this->container['brand_uid'] = isset($data['brand_uid']) ? $data['brand_uid'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets guest_id
     * @return string
     */
    public function getGuestId()
    {
        return $this->container['guest_id'];
    }

    /**
     * Sets guest_id
     * @param string $guest_id
     * @return $this
     */
    public function setGuestId($guest_id)
    {
        $this->container['guest_id'] = $guest_id;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     * @param string $postal_code
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets mobile_phone_number
     * @return string
     */
    public function getMobilePhoneNumber()
    {
        return $this->container['mobile_phone_number'];
    }

    /**
     * Sets mobile_phone_number
     * @param string $mobile_phone_number
     * @return $this
     */
    public function setMobilePhoneNumber($mobile_phone_number)
    {
        $this->container['mobile_phone_number'] = $mobile_phone_number;

        return $this;
    }

    /**
     * Gets e164_country_code
     * @return string
     */
    public function getE164CountryCode()
    {
        return $this->container['e164_country_code'];
    }

    /**
     * Sets e164_country_code
     * @param string $e164_country_code
     * @return $this
     */
    public function setE164CountryCode($e164_country_code)
    {
        $this->container['e164_country_code'] = $e164_country_code;

        return $this;
    }

    /**
     * Gets loyalty_card_id
     * @return string
     */
    public function getLoyaltyCardId()
    {
        return $this->container['loyalty_card_id'];
    }

    /**
     * Sets loyalty_card_id
     * @param string $loyalty_card_id
     * @return $this
     */
    public function setLoyaltyCardId($loyalty_card_id)
    {
        $this->container['loyalty_card_id'] = $loyalty_card_id;

        return $this;
    }

    /**
     * Gets guests_per_page
     * @return int
     */
    public function getGuestsPerPage()
    {
        return $this->container['guests_per_page'];
    }

    /**
     * Sets guests_per_page
     * @param int $guests_per_page
     * @return $this
     */
    public function setGuestsPerPage($guests_per_page)
    {
        $this->container['guests_per_page'] = $guests_per_page;

        return $this;
    }

    /**
     * Gets page_number
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     * @param int $page_number
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets request_time
     * @return \DateTime
     */
    public function getRequestTime()
    {
        return $this->container['request_time'];
    }

    /**
     * Sets request_time
     * @param \DateTime $request_time
     * @return $this
     */
    public function setRequestTime($request_time)
    {
        $this->container['request_time'] = $request_time;

        return $this;
    }

    /**
     * Gets site_identifier
     * @return string
     */
    public function getSiteIdentifier()
    {
        return $this->container['site_identifier'];
    }

    /**
     * Sets site_identifier
     * @param string $site_identifier
     * @return $this
     */
    public function setSiteIdentifier($site_identifier)
    {
        $this->container['site_identifier'] = $site_identifier;

        return $this;
    }

    /**
     * Gets brand_uid
     * @return string
     */
    public function getBrandUid()
    {
        return $this->container['brand_uid'];
    }

    /**
     * Sets brand_uid
     * @param string $brand_uid
     * @return $this
     */
    public function setBrandUid($brand_uid)
    {
        $this->container['brand_uid'] = $brand_uid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


