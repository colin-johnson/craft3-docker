<?php
/**
 * QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesKitchenDisplayGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QSR Automations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QsrAutomations\Api\Model;

use \ArrayAccess;

/**
 * QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesKitchenDisplayGroup Class Doc Comment
 *
 * @category    Class
 * @package     QsrAutomations\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QsrAutomationsEnterpriseDineTimeThirdPartyCommonBaseClassesKitchenDisplayGroup implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'QsrAutomations.Enterprise.DineTimeThirdParty.Common.BaseClasses.Kitchen.DisplayGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'courses_active' => 'int',
        'display_group_id' => 'int',
        'display_group_name' => 'string',
        'items_active' => 'int',
        'items_prepared' => 'int',
        'total_forecast_prep_time' => 'int',
        'timestamp_local' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'courses_active' => 'int32',
        'display_group_id' => 'int32',
        'display_group_name' => null,
        'items_active' => 'int32',
        'items_prepared' => 'int32',
        'total_forecast_prep_time' => 'int32',
        'timestamp_local' => 'date-time'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'courses_active' => 'CoursesActive',
        'display_group_id' => 'DisplayGroupID',
        'display_group_name' => 'DisplayGroupName',
        'items_active' => 'ItemsActive',
        'items_prepared' => 'ItemsPrepared',
        'total_forecast_prep_time' => 'TotalForecastPrepTime',
        'timestamp_local' => 'TimestampLocal'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'courses_active' => 'setCoursesActive',
        'display_group_id' => 'setDisplayGroupId',
        'display_group_name' => 'setDisplayGroupName',
        'items_active' => 'setItemsActive',
        'items_prepared' => 'setItemsPrepared',
        'total_forecast_prep_time' => 'setTotalForecastPrepTime',
        'timestamp_local' => 'setTimestampLocal'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'courses_active' => 'getCoursesActive',
        'display_group_id' => 'getDisplayGroupId',
        'display_group_name' => 'getDisplayGroupName',
        'items_active' => 'getItemsActive',
        'items_prepared' => 'getItemsPrepared',
        'total_forecast_prep_time' => 'getTotalForecastPrepTime',
        'timestamp_local' => 'getTimestampLocal'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['courses_active'] = isset($data['courses_active']) ? $data['courses_active'] : null;
        $this->container['display_group_id'] = isset($data['display_group_id']) ? $data['display_group_id'] : null;
        $this->container['display_group_name'] = isset($data['display_group_name']) ? $data['display_group_name'] : null;
        $this->container['items_active'] = isset($data['items_active']) ? $data['items_active'] : null;
        $this->container['items_prepared'] = isset($data['items_prepared']) ? $data['items_prepared'] : null;
        $this->container['total_forecast_prep_time'] = isset($data['total_forecast_prep_time']) ? $data['total_forecast_prep_time'] : null;
        $this->container['timestamp_local'] = isset($data['timestamp_local']) ? $data['timestamp_local'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets courses_active
     * @return int
     */
    public function getCoursesActive()
    {
        return $this->container['courses_active'];
    }

    /**
     * Sets courses_active
     * @param int $courses_active
     * @return $this
     */
    public function setCoursesActive($courses_active)
    {
        $this->container['courses_active'] = $courses_active;

        return $this;
    }

    /**
     * Gets display_group_id
     * @return int
     */
    public function getDisplayGroupId()
    {
        return $this->container['display_group_id'];
    }

    /**
     * Sets display_group_id
     * @param int $display_group_id
     * @return $this
     */
    public function setDisplayGroupId($display_group_id)
    {
        $this->container['display_group_id'] = $display_group_id;

        return $this;
    }

    /**
     * Gets display_group_name
     * @return string
     */
    public function getDisplayGroupName()
    {
        return $this->container['display_group_name'];
    }

    /**
     * Sets display_group_name
     * @param string $display_group_name
     * @return $this
     */
    public function setDisplayGroupName($display_group_name)
    {
        $this->container['display_group_name'] = $display_group_name;

        return $this;
    }

    /**
     * Gets items_active
     * @return int
     */
    public function getItemsActive()
    {
        return $this->container['items_active'];
    }

    /**
     * Sets items_active
     * @param int $items_active
     * @return $this
     */
    public function setItemsActive($items_active)
    {
        $this->container['items_active'] = $items_active;

        return $this;
    }

    /**
     * Gets items_prepared
     * @return int
     */
    public function getItemsPrepared()
    {
        return $this->container['items_prepared'];
    }

    /**
     * Sets items_prepared
     * @param int $items_prepared
     * @return $this
     */
    public function setItemsPrepared($items_prepared)
    {
        $this->container['items_prepared'] = $items_prepared;

        return $this;
    }

    /**
     * Gets total_forecast_prep_time
     * @return int
     */
    public function getTotalForecastPrepTime()
    {
        return $this->container['total_forecast_prep_time'];
    }

    /**
     * Sets total_forecast_prep_time
     * @param int $total_forecast_prep_time
     * @return $this
     */
    public function setTotalForecastPrepTime($total_forecast_prep_time)
    {
        $this->container['total_forecast_prep_time'] = $total_forecast_prep_time;

        return $this;
    }

    /**
     * Gets timestamp_local
     * @return \DateTime
     */
    public function getTimestampLocal()
    {
        return $this->container['timestamp_local'];
    }

    /**
     * Sets timestamp_local
     * @param \DateTime $timestamp_local
     * @return $this
     */
    public function setTimestampLocal($timestamp_local)
    {
        $this->container['timestamp_local'] = $timestamp_local;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


