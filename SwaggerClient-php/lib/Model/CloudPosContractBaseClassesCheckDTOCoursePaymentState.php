<?php
/**
 * CloudPosContractBaseClassesCheckDTOCoursePaymentState
 *
 * PHP version 5
 *
 * @category Class
 * @package  QsrAutomations\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QSR Automations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QsrAutomations\Api\Model;

use \ArrayAccess;

/**
 * CloudPosContractBaseClassesCheckDTOCoursePaymentState Class Doc Comment
 *
 * @category    Class
 * @package     QsrAutomations\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CloudPosContractBaseClassesCheckDTOCoursePaymentState implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CloudPos.Contract.BaseClasses.Check.DTO.CoursePaymentState';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'change' => 'double',
        'payment_state' => 'string',
        'sub_total' => 'double',
        'tax' => 'double',
        'tender' => 'double',
        'total' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'change' => 'double',
        'payment_state' => null,
        'sub_total' => 'double',
        'tax' => 'double',
        'tender' => 'double',
        'total' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'change' => 'Change',
        'payment_state' => 'PaymentState',
        'sub_total' => 'SubTotal',
        'tax' => 'Tax',
        'tender' => 'Tender',
        'total' => 'Total'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'change' => 'setChange',
        'payment_state' => 'setPaymentState',
        'sub_total' => 'setSubTotal',
        'tax' => 'setTax',
        'tender' => 'setTender',
        'total' => 'setTotal'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'change' => 'getChange',
        'payment_state' => 'getPaymentState',
        'sub_total' => 'getSubTotal',
        'tax' => 'getTax',
        'tender' => 'getTender',
        'total' => 'getTotal'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PAYMENT_STATE_TOTALED = 'Totaled';
    const PAYMENT_STATE_TENDERED = 'Tendered';
    const PAYMENT_STATE_STORED = 'Stored';
    const PAYMENT_STATE_RECALLED = 'Recalled';
    const PAYMENT_STATE_PARKED = 'Parked';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPaymentStateAllowableValues()
    {
        return [
            self::PAYMENT_STATE_TOTALED,
            self::PAYMENT_STATE_TENDERED,
            self::PAYMENT_STATE_STORED,
            self::PAYMENT_STATE_RECALLED,
            self::PAYMENT_STATE_PARKED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['change'] = isset($data['change']) ? $data['change'] : null;
        $this->container['payment_state'] = isset($data['payment_state']) ? $data['payment_state'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['tender'] = isset($data['tender']) ? $data['tender'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getPaymentStateAllowableValues();
        if (!in_array($this->container['payment_state'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'payment_state', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getPaymentStateAllowableValues();
        if (!in_array($this->container['payment_state'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets change
     * @return double
     */
    public function getChange()
    {
        return $this->container['change'];
    }

    /**
     * Sets change
     * @param double $change
     * @return $this
     */
    public function setChange($change)
    {
        $this->container['change'] = $change;

        return $this;
    }

    /**
     * Gets payment_state
     * @return string
     */
    public function getPaymentState()
    {
        return $this->container['payment_state'];
    }

    /**
     * Sets payment_state
     * @param string $payment_state
     * @return $this
     */
    public function setPaymentState($payment_state)
    {
        $allowed_values = $this->getPaymentStateAllowableValues();
        if (!is_null($payment_state) && !in_array($payment_state, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_state', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['payment_state'] = $payment_state;

        return $this;
    }

    /**
     * Gets sub_total
     * @return double
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     * @param double $sub_total
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets tax
     * @return double
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     * @param double $tax
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets tender
     * @return double
     */
    public function getTender()
    {
        return $this->container['tender'];
    }

    /**
     * Sets tender
     * @param double $tender
     * @return $this
     */
    public function setTender($tender)
    {
        $this->container['tender'] = $tender;

        return $this;
    }

    /**
     * Gets total
     * @return double
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     * @param double $total
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QsrAutomations\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


